{"version":3,"sources":["webpack:///webpack/bootstrap f60072f4ff5be798a0c6","webpack:///./lib/netbanking.ts","webpack:///external \"CSCoreSDK\"","webpack:///./lib/accounts/accounts.ts","webpack:///./lib/accounts/balance.ts","webpack:///./lib/accounts/services.ts","webpack:///./lib/accounts/reservations.ts","webpack:///./lib/accounts/repayments.ts","webpack:///./lib/accounts/statements.ts","webpack:///./lib/accounts/subAccounts.ts","webpack:///./lib/accounts/transactions.ts","webpack:///./lib/accounts/transfer.ts","webpack:///./lib/accounts/standing-orders.ts","webpack:///./lib/accounts/direct-debits.ts","webpack:///./lib/profile/profile.ts","webpack:///./lib/profile/lastLogins.ts","webpack:///./lib/cards/cards.ts","webpack:///./lib/cards/delivery.ts","webpack:///./lib/cards/transactions.ts","webpack:///./lib/cards/actions.ts","webpack:///./lib/cards/limits.ts","webpack:///./lib/cards/secure3D.ts","webpack:///./lib/cards/transfer.ts","webpack:///./lib/cards/statements.ts","webpack:///./lib/orders/orders.ts","webpack:///./lib/orders/bookingDate.ts","webpack:///./lib/orders/domestic.ts","webpack:///./lib/orders/limits.ts","webpack:///./lib/orders/mobile.ts","webpack:///./lib/securities/securities.ts","webpack:///./lib/securities/transactions.ts","webpack:///./lib/settings/settings.ts","webpack:///./lib/contacts/contacts.ts","webpack:///./lib/plugins/plugins.ts","webpack:///./lib/contracts/contracts.ts","webpack:///./lib/contracts/buildings/buildings.ts","webpack:///./lib/contracts/buildings/services.ts","webpack:///./lib/contracts/transactions.ts","webpack:///./lib/contracts/pensions/pensions.ts","webpack:///./lib/contracts/insurances/insurances.ts","webpack:///./lib/contracts/insurances/funds.ts","webpack:///./lib/contracts/insurances/beneficiaries.ts","webpack:///./lib/contracts/insurances/insurees.ts","webpack:///./lib/contracts/insurances/payments.ts","webpack:///./lib/contracts/insurances/services.ts","webpack:///./lib/contracts/insurances/events.ts","webpack:///./lib/contracts/insurances/tax-benefits.ts","webpack:///./lib/contracts/insurances/strategies.ts","webpack:///./lib/contracts/insurances/transfer.ts","webpack:///./lib/contracts/loyalty/loyalty.ts","webpack:///./lib/services/services.ts","webpack:///./lib/messages/messages.ts","webpack:///./lib/messages/mandatory.ts","webpack:///./lib/messages/attachments.ts","webpack:///./lib/templates/templates.ts","webpack:///./lib/phone-numbers/phone-numbers.ts","webpack:///./lib/budgets/budgets.ts","webpack:///./lib/goals/goals.ts","webpack:///./lib/promotions/promotions.ts","webpack:///./lib/authorization-limits/authorization-limits.ts","webpack:///./lib/authorization-token/authorization-token.ts","webpack:///./lib/bundles/bundles.ts"],"names":[],"mappings":"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","file":"cs-netbanking-sdk.sfx.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f60072f4ff5be798a0c6\n **/","/// <reference path=\"../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountsResource} from './accounts/accounts';\nimport {ProfileResource} from './profile/profile';\nimport {CardsResource} from './cards/cards';\nimport {OrdersResource} from './orders/orders';\nimport {SecuritiesResource} from './securities/securities';\nimport {SettingsResource} from './settings/settings';\nimport {ContactsResource} from './contacts/contacts';\nimport {PluginsResource} from './plugins/plugins';\nimport {ContractsResource} from './contracts/contracts';\nimport {ServicesResource} from './services/services';\nimport {MessagesResource} from './messages/messages';\nimport {TemplatesResource} from './templates/templates';\nimport {PhoneNumbersResource} from './phone-numbers/phone-numbers';\nimport {BudgetsResource} from './budgets/budgets';\nimport {GoalsResource} from './goals/goals';\nimport {PromotionsResource} from './promotions/promotions';\nimport {AuthorizationLimitsResource} from './authorization-limits/authorization-limits';\nimport {AuthorizationTokenResource} from './authorization-token/authorization-token';\nimport {BundlesResource} from './bundles/bundles';\n\nvar sharedClient : NetbankingClient = null;\n\n/*+\n * Returns the singleton NetbankingClient\n */\nexport function getClient() {\n    if (sharedClient === null) {\n        return new NetbankingClient(CSCoreSDK.config.copy(), CSCoreSDK.sharedContext);\n    }\n    return sharedClient;\n}\n\n/**\n * Netbanking client \n */\nexport class NetbankingClient extends CSCoreSDK.WebApiClient {\n    \n    /**\n     * Creates new instance of NetbankingClient\n     * \n     * @param config WebApiConfiguration object that configures this client\n     * @param context WebApiContext object that allows for data sharing between clients\n     */\n    constructor(config: CSCoreSDK.WebApiConfiguration, context: CSCoreSDK.WebApiContext) {\n        super(config, '/api/v3/netbanking/my');\n        this.sharedContext = context;\n    }\n    \n   /**\n    * List all accounts and get other information like balance, services, statements etc.\n    */\n    get accounts() {\n        return new AccountsResource(this.getPath() + '/accounts', this);\n    }\n    \n    /**\n    * Get information about the current user's profile and past logins.\n    */\n    get profile() {\n        return new ProfileResource(this.getPath() + '/profile', this);\n    }\n    \n    /**\n    * List all cards and other information like delivery, transactions, limits etc. \n    */\n    get cards() {\n        return new CardsResource(this.getPath() + '/cards', this);\n    }\n    \n    /**\n    * List, update and get payments, booking date or create and update domestic payments. \n    */\n    get orders() {\n        return new OrdersResource(this.getPath() + '/orders', this);\n    }\n    \n    get securities() {\n        return new SecuritiesResource(this.getPath() + '/securities', this);\n    }\n\n    get settings() {\n        return new SettingsResource(`${this.getPath()}/settings`, this);\n    }\n\n    get contacts() {\n        return new ContactsResource(`${this.getPath()}/contacts`, this);\n    }\n\n    get plugins() {\n        return new PluginsResource(`${this.getPath()}/plugins`, this);\n    }\n\n    get contracts() {\n        return new ContractsResource(`${this.getPath()}/contracts`, this);\n    }\n\n    get services() {\n        return new ServicesResource(`${this.getPath()}/services`, this);\n    }\n\n    get messages() {\n        return new MessagesResource(`${this.getPath()}/messages`, this); \n    }\n\n    get templates() {\n        return new TemplatesResource(`${this.getPath()}/templates`, this);\n    }\n\n    get phoneNumbers() {\n        return new PhoneNumbersResource(`${this.getPath()}/phone-numbers`, this);\n    }\n\n    get budgets() {\n        return new BudgetsResource(`${this.getPath()}/budgets`, this);\n    }\n\n    get goals() {\n        return new GoalsResource(`${this.getPath()}/goals`, this);\n    }\n\n    get promotions() {\n        return new PromotionsResource(`${this.getPath()}/promotions`, this);\n    }\n\n    get authorizationLimits() {\n        return new AuthorizationLimitsResource(`${this.getPath()}/authorizationLimits`, this);\n    }\n\n    get authorizationToken() {\n        return new AuthorizationTokenResource(`${this.getPath()}/auth/token/invalidate`, this);\n    }\n\n    get bundles() {\n        return new BundlesResource(`${this.getPath()}/bundles`, this);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/netbanking.ts\n **/","module.exports = CSCoreSDK;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"CSCoreSDK\"\n ** module id = 1\n ** module chunks = 0\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signable, AccountNumber, Amount, NetbankingParameters} from '../common';\nimport {AccountBalanceResource} from './balance';\nimport {AccountServicesResource} from './services';\nimport {AccountReservationsResource} from './reservations';\nimport {AccountRepaymentsResource} from './repayments';\nimport {AccountStatementsResource} from './statements';\nimport {SubAccountsResource} from './subAccounts';\nimport {AccountTransactionsResource} from './transactions';\nimport {AccountTransferResource} from './transfer';\nimport {AccountStandingOrdersResource} from './standing-orders';\nimport {AccountDirectDebitsResource} from './direct-debits';\n\n/**\n* List all accounts and get individual account instance resource \n*/\nexport class AccountsResource extends CSCoreSDK.Resource \nimplements CSCoreSDK.HasInstanceResource<AccountResource>, CSCoreSDK.PaginatedListEnabled<MainAccount> {\n    \n   /**\n    * List all accounts\n    */\n    list = (params?: AccountParameters) : Promise<AccountList> => {\n        \n        // transform \"sort\" and \"order\" parameters to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n        \n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'accounts', params, response => {\n            response.items.forEach(item => {\n                \n                // add convenient methods\n                resourcifyListing(<MainAccount>item, this.withId((<MainAccount>item).id), true);\n                \n                // transform ISO dates to native Date objects\n                transformResponse(<MainAccount>item);\n            });\n            return response;\n        });\n    }\n    \n    /**\n    * Get the detail of the account with a given id\n    */\n    withId = (id: string|number) : AccountResource => {\n        return new AccountResource(id, this.getPath(), this._client);\n    }\n}\n\n/**\n* Get detail of the individual account and additional information about it \n*/\nexport class AccountResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<MainAccount>, CSCoreSDK.UpdateEnabled<ChangeAccountSettingsRequest, ChangeAccountSettingsResponse> {\n    \n    /**\n    * Get account detail\n    */\n    get = (): Promise<MainAccount> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            \n            // add convenienxce methods\n            resourcifyListing(<MainAccount>response, this, false);\n            \n            // transform ISO dates to native Date objects\n            transformResponse(<MainAccount>response);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Update account's settings. \n    */  \n    update = (payload: ChangeAccountSettingsRequest): Promise<ChangeAccountSettingsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            // add convenience methods\n            resourcifyListing(<MainAccount>response, this, false);\n            \n            // transform ISO dates to native Date objects\n            transformResponse(<MainAccount>response);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Get information about the account's balance\n    */\n    get balance() {\n        return new AccountBalanceResource(this.getPath() + '/balance', this._client);\n    }\n    \n    /**\n    * Get information about the account's services\n    */\n    get services() {\n        return new AccountServicesResource(this.getPath() + '/services', this._client);\n    }\n    \n    /**\n    * Get information about the account's reservations\n    */\n    get reservations() {\n        return new AccountReservationsResource(this.getPath() + '/reservations', this._client);\n    }\n    \n    /**\n    * Get information about the account's repayments\n    */\n    get repayments() {\n        return new AccountRepaymentsResource(this.getPath() + '/repayments', this._client);\n    }\n    \n    /**\n    * Get information about the account's statements\n    */\n    get statements() {\n        return new AccountStatementsResource(this.getPath() + '/statements', this._client);\n    }\n    \n    /**\n    * Get information about the account's subaccounts\n    */\n    get subAccounts() {\n        return new SubAccountsResource(this.getPath() + '/subaccounts', this._client);\n    }\n    \n    /**\n    * Get information about the account's transactions\n    */\n    get transactions() {\n        return new AccountTransactionsResource(this.getPath() + '/transactions', this._client);\n    }\n    \n    /**\n    * Revolve a loan\n    */\n    get transfer() {\n        return new AccountTransferResource(this.getPath() + '/transfer', this._client);\n    }\n\n    get standingOrders() {\n        return new AccountStandingOrdersResource(this.getPath() + '/standingorders', this.getClient());\n    }\n\n    get directDebits() {\n        return new AccountDirectDebitsResource(this.getPath() + '/directdebits', this.getClient());\n    }\n}\n\nfunction resourcifyListing(accountListing: MainAccount, account: AccountResource, isFromList: boolean) : void {\n    if(isFromList) {\n        accountListing.get = account.get;    \n    }\n    accountListing.update = account.update;\n    accountListing.services = account.services;\n    accountListing.transactions = account.transactions;\n    accountListing.reservations = account.reservations;\n    accountListing.transfer = account.transfer;\n    accountListing.statements = account.statements;\n    accountListing.repayments = account.repayments;\n    accountListing.standingOrders = account.standingOrders;\n    accountListing.directDebits = account.directDebits;\n}\n\nfunction transformResponse(accountListing) {\n    if(accountListing.saving) {\n        CSCoreSDK.EntityUtils.addDatesFromISO('nextProlongation', accountListing.saving);    \n    }\n    if(accountListing.loan) {\n        CSCoreSDK.EntityUtils.addDatesFromISO(['maturityDate', 'drawdownToDate', 'installmentDay', 'nextRateDate'], accountListing.loan);\n    }\n    if (accountListing.subaccounts) {\n        CSCoreSDK.EntityUtils.addDatesToItems('overdraftDueDate', accountListing, 'subaccounts');\n    }\n    CSCoreSDK.EntityUtils.addDatesFromISO('overdraftDueDate', accountListing);\n}\n\nexport interface AccountList extends CSCoreSDK.PaginatedListResponse<MainAccount> {}\n\nexport interface MainAccount extends Account {\n    \n    /**\n    * User defined account name. Max. 50 characters\n    */\n    alias?: string;\n    \n    /**\n    * Account description. Currently account owner name is returned.\n    */\n    description?: string;\n    \n    /**\n    * Disposable account balance\n    */\n    disposable?: Amount;\n    \n    /**\n    * Overdraft amount for account\n    */\n    overdraft?: OverdraftAmount;\n    \n    /**\n    * Due date of overdraft. Only for overdrafts where automatic prolongation is not set.\n    */\n    overdraftDueDate?: Date;\n     \n    /**\n    * Array of flags\n    */\n    flags?: [string];\n    \n    /**\n    * Account's subaccounts\n    */\n    subaccounts?: [SubAccount];\n    \n    /**\n    * Basic debit Interest rate, used for Loan and Mortgage account. Value in percentage, e.g. 11,5 will be displayed as 11,5 %.\n    */\n    debitInterestRate?: number;\n    \n    /**\n    * For loans (not mortgages) this is interest rate which apply when repayment is delayed. Value in percentage, e.g. 19,5 will be displayed as 19,5 %.\n    */\n    penaltyInterestRate?: number;\n    \n    /**\n    * Loan of the account\n    */\n    loan?: Loan;\n    \n    /**\n    * Savings of the account\n    */\n    saving?: Saving;\n    \n   /**\n    * \n    */\n    ownTransferReceivers?: TransferReceivers;\n    \n    /**\n     * Convenience method for getting detail of the account right from the list \n     */\n    get: () => Promise<MainAccount>;\n    \n    /**\n    * Convenience method for updating account's details\n    */\n    update: (payload: ChangeAccountSettingsRequest) => Promise<ChangeAccountSettingsResponse>;\n    \n    /**\n    * Convenience getter for getting accounts's services resource\n    */\n    services: AccountServicesResource;\n    \n    /**\n    * Convenience getter for getting accounts's transactions resource\n    */\n    transactions: AccountTransactionsResource;\n    \n    /**\n    * Convenience getter for getting accounts's reservations resource\n    */\n    reservations: AccountReservationsResource;\n    \n    /**\n    * Convenience getter for getting accounts's transfer resource\n    */\n    transfer: AccountTransferResource;\n    \n    /**\n    * Convenience getter for getting accounts's statements resource\n    */\n    statements: AccountStatementsResource;\n    \n    /**\n    * Convenience getter for getting accounts's repayments resource\n    */\n    repayments: AccountRepaymentsResource;\n\n    /**\n    * Convenience getter for getting accounts's standing orders resource\n    */\n    standingOrders: AccountStandingOrdersResource;\n\n    /**\n    * Convenience getter for getting accounts's direct debits resource\n    */\n    directDebits: AccountDirectDebitsResource;\n}\n\nexport interface OverdraftAmount extends Amount {\n    \n    /**\n    * Due date of overdraft. Only for overdrafts where automatic prolongation is not set.\n    */\n    dueDate?: Date;\n}\n\nexport interface SubAccount extends Account {\n    \n    /**\n    * In case of interest rate bands this is the interest rate which applies to value over limit.\n    */\n    \"cz-interestRateOverLimit\"?: number;\n    \n    /**\n    * Limit amount for basic credit interest rate used for some saving accounts.\n    */\n    \"cz-interestRateLimit\"?: Amount;\n}\n\nexport interface Account {\n    \n    /**\n    * Unique product id\n    */\n    id: string;\n    \n    /**\n    * Account number of this account\n    */\n    accountno: AccountNumber;\n    \n    /**\n    * Product type. Possible values are CURRENT (for current accounts), SAVING (for saving accounts), LOAN (for loans)\n    */\n    type: string;\n    \n    /**\n    * Subtype product. Possible values are mapping based on type. For CURRENT (CURRENT_ACCOUNT, INVESTMENT_CURRENT_ACCOUNT, \n    * GIRO_ACCOUNT, GIRO_ACCOUNT_OLD, FOREIGN_ACCOUNT, INVESTMENT_FOREIGN_ACCOUNT), SAVING (DEPOSIT_ACCOUNT, SAVINT_ACCOUNT, \n    * SAVING_INTERNET, CHILDREN_PASSBOOK, SAVING_CS, BENEFIT_INVEST), LOAN (LOAN_ACCOUNT, MORTGAGE, REVOLVING_LOAN).\n    */\n    subtype: string;\n    \n    /**\n    * Product code.\n    */\n    product: string;\n    \n    /**\n    * Product description localized\n    */\n    productI18N: string;\n    \n    /**\n    * Actual account balance. For loans this field contains outstanding principal\n    */\n    balance: Amount;\n    \n    /**\n    * Basic credit Interest rate, used for Current and Saving account. Value in percentage, e.g. 0,5 will be displayed as 0,5 %\n    */\n    creditInterestRate: number;\n}\n\nexport interface Loan {\n    \n    /**\n    * For mortgages this is the date of interest rate validity.\n    */\n    interestRateToDate?: number;\n    \n    /**\n    * For loans this is contracted value of the loan.\n    */\n    loanAmount?: Amount;\n    \n    /**\n    * For mortgages this is its maturity date.\n    */\n    maturityDate?: Date;\n    \n    /**\n    * For loans this is remaining amount for utilization. Basically this is disposable balance for loans.\n    */\n    remainingLoanAmount: Amount;\n    \n    /**\n    * For loans and morgages this is last date when you can use money.\n    */\n    drawdownToDate?: Date;\n    \n    /**\n    * For mortgages this is actual drawdown amount.\n    */\n    drawdownAmount: Amount;\n    \n    /**\n    * For loans and mortgages this is value of the principal. Value which should be paid back to bank.\n    */\n    outstandingDebt?: Amount;\n    \n    /**\n    * Amount of money to onetime repay whole loan.\n    */\n    \"cz-lumpsumRepayment\"?: Amount;\n    \n    /**\n    * Frequency of the repayment. Possible values are MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, WEEKLY.\n    */\n    installmentFrequency?: string;\n    \n    /**\n    * Day of the month when repayment should be paid (f.e. 22)\n    */\n    installmentDay?: Date;\n    \n    /**\n    * Loans and mortgages repayment amount.\n    */\n    nextRateAmount?: Amount;\n    \n    /**\n    * Next date of the repayment (for loans).\n    */\n    nextRateDate?: Date;\n}\n\nexport interface Saving {\n    \n    /**\n    * In case of interest rate bands this is the interest rate which applies to value over limit.\n    */\n    interestRateOverLimit?: number;\n    \n    /**\n    * Limit amount for basic credit interest rate used for some saving accounts.\n    */\n    interestRateLimit?: Amount;\n    \n    /**\n    * Bonus interest rates which can be gained if certain conditions are met.\n    */\n    \"cz-bonusInterestRate\"?: number;\n    \n    /**\n    * Saving purpose code (for some savings accounts). Possible values are ELECTRONICS, WHITE_GOODS, HOLIDAYS, SPORT_EQUIPMENT, FURNITURE, CARS_AND_ACCESSORIES, HOBBIES_AND_GARDEN, GIFTS_AND_PARTIES, HEALTH, STUDIES, HOUSING, PERSONAL.\n    */\n    savingGoal?: number;\n    \n    /**\n    * For some savings accounts this is target amount of the saving.\n    */\n    targetAmount?: Amount;\n    \n    /**\n    * Minimum balance for some current and savings accounts.\n    */\n    minimumBalance?: Amount;\n    \n    /**\n    * The next prolongation date, when BE system will automatically credit regular deposit amount on saving account or calculate and transfer interest on term deposit.\n    */\n    nextProlongation: Date;\n    \n    /**\n    * Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualní spoření. Field contains maximum amount for current month (maximum for month minus already executed payments in current month).\n    */\n    extraSavingMaximum?: Amount;\n    \n    /**\n    * Maximum amount of own transfer from current (master) to saving account (slave, this) used only for some saving accounts. Currently used only for Individualni sporeni. Field contains maximum possible amount for all months (regardless already created payments).\n    */\n    \"cz-extraSavingMaximumMonthly\"?: Amount;\n}\n\nexport interface TransferReceivers {\n    \n    /**\n    * Identifier of the account which is allowed as a transfer receiver. If id is specified then you can find it among other accounts in GET /netbanking/my/accounts response.\n    */\n    id: string;\n    \n    /**\n    * Account number which is allowed as a transfer receiver.\n    */\n    accountno: AccountNumber;\n}\n\nexport interface ChangeAccountSettingsRequest {\n    \n    /**\n    * User defined account name. Max. 50 characters \n    */\n    alias?: string;\n}\n\nexport interface ChangeAccountSettingsResponse extends MainAccount, Signable {}\n\nexport interface AccountParameters extends NetbankingParameters {\n    \n    /**\n    * Example: CURRENT.\n    */\n    type?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/accounts.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get information about the account's balance\n*/\nexport class AccountBalanceResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<AccountBalance> {\n    \n    /**\n    * Fetches the balance and returns them in a promise\n    */\n    get = (): Promise<AccountBalance> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n}\n\nexport interface AccountBalance {\n    \n    /**\n    * Account balance for Current, Saved amount for Saving, Principal Outstanding for Loan/Mortgage.\n    */\n    balance: Amount;\n    \n    /**\n    * Disposable balance for Current account.\n    */\n    disposable?: Amount;\n    \n    /**\n    * Overdraft amount for Current account.\n    */\n    overdraft?: Amount; \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/balance.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\n/**\n* Get information about the account's services\n*/\nexport class AccountServicesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Service> {\n    \n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n    \n    /**\n    * Fetches the services and returns them in a promise\n    */\n    list = (params?: ServiceParameters): Promise<ServiceList> => {\n        \n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'services', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n            \n            return response;\n        });\n    }\n}\n\nexport interface ServiceList extends CSCoreSDK.PaginatedListResponse<Service> {}\n\nexport interface Service {\n    \n    /**\n    * Service identifier.\n    */\n    id: string;\n    \n    /**\n    * Localized name of the service.\n    */\n    nameI18N: string;\n    \n    /**\n    * Information about service group. There is an icon defined for every group.\n    */\n    iconGroup: string;\n    \n    /**\n    * Service is active from date.\n    */\n    dateFrom?: Date;\n    \n    /**\n    * Service will be active till date.\n    */\n    dateTo?: Date;\n}\n\nexport interface ServiceParameters extends CSCoreSDK.Paginated {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/services.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get information about the account's reservations\n*/\nexport class AccountReservationsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Reservation> {\n    \n    /**\n    * Fetches the reservations and returns them in a promise\n    */\n    list = (params?: ReservationParameters) : Promise<ReservationList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'reservations', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems(['creationDate', 'expirationDate'], response);\n            \n            return response;\n        });\n    }\n}\n\nexport interface ReservationList extends CSCoreSDK.PaginatedListResponse<Reservation> {}\n\nexport interface Reservation {\n    \n    /**\n    * Type of reservation. Possible values are CASH_WITHDRAWAL, PAYMENT, CARD_PAYMENT, OTHER\n    */\n    type: string;\n    \n    /**\n    * Reservation status. Possible values are RESERVED, CANCELLED, EXPIRED. Currently only reservations with status RESERVED are supported.\n    */\n    status: string;\n    \n    /**\n    * Transaction date and time.\n    */\n    creationDate: Date;\n    \n    /**\n    * Reservation expiration date.\n    */\n    expirationDate?: Date;\n    \n    /**\n    * Merchant Name / ATM.\n    */\n    merchantName?: string;\n    \n    /**\n    * Merchant address.\n    */\n    \"cz-merchantAddress\"?: string;\n    \n    /**\n    * Reservation description, additional info.\n    */\n    description: string;\n    \n    /**\n    * The amount of reservation in account's currency\n    */\n    amount: Amount;\n    \n    /**\n    * The amount of the reservation in transaction currency\n    */\n    amountSender?: Amount; \n}\n\nexport interface ReservationParameters extends CSCoreSDK.Paginated {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/reservations.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get information about the account's repayments\n*/\nexport class AccountRepaymentsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Repayment> {\n    \n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n    \n    /**\n    * Fetches the repayments and returns them in a promise\n    */\n    list = (): Promise<RepaymentList> => {\n        \n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'repayments', null).then(response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('repaymentDate', response)\n\n            return response;\n        });\n    }\n}\n\nexport interface RepaymentList extends CSCoreSDK.PaginatedListResponse<Repayment> {}\n\nexport interface Repayment {\n    \n   /**\n    * Date of the repayment.\n    */\n    repaymentDate: Date;\n    \n   /**\n    * Repayment amount. What should be paid.\n    */\n    amount: Amount;\n    \n   /**\n    * Actual paid amount.\n    */\n    paidAmount?: Amount;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/repayments.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {StatementList, Statement, NetbankingParameters, DownloadStatementParameters} from '../common';\n\n/**\n* Get information about the account's statements\n*/\nexport class AccountStatementsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Statement> {\n    \n    /**\n    * Fetches the statements and returns them in a promise\n    */\n    list = (params?: NetbankingParameters) : Promise<StatementList> => {\n        \n        // transform \"sort\" and \"order\" parameters to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n        \n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Downloads statements file\n    */\n    download = (params: DownloadStatementParameters): Promise<any> => {\n        return CSCoreSDK.ResourceUtils.CallDownload(this, 'signed/download', 'POST', params);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/statements.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {StatementList, Statement, NetbankingParameters, DownloadStatementParameters} from '../common';\n\n/**\n* Get individual SubAccount resource\n*/\nexport class SubAccountsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<SubAccountResource> {\n    \n    /**\n    * Returns individual SubAccount resource with a given id\n    */\n    withId = (id: string|number) : SubAccountResource => {\n        return new SubAccountResource(id, this.getPath(), this._client);\n    }\n}\n\n/**\n* Get information about the subaccount\n*/\nexport class SubAccountResource extends CSCoreSDK.InstanceResource {\n    \n    /**\n    * Get information about the subaccount's statements\n    */\n    get statements() {\n        return new SubAccountStatementsResource(this.getPath() + '/statements', this._client);\n    }\n}\n\n/**\n* List all subaccount's statements\n*/\nexport class SubAccountStatementsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Statement> {\n    \n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n    \n    /**\n    * Returns all subaccount's statements in a promise\n    */\n    list = (params?: NetbankingParameters): Promise<StatementList> => {\n        \n        // transform \"sort\" and \"order\" parameters to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n           \n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Downloads statements file\n    */\n    download = (params: DownloadStatementParameters): Promise<any> => {\n        return CSCoreSDK.ResourceUtils.CallDownload(this, 'download', 'POST', params);\n    }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/subAccounts.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AddNoteAndMarkTransactionRequest, AddNoteAndMarkTransactionResponse, ExportTransactionsParameters} from '../common';\n\n/**\n* Get individual AccountsTransactionsResource\n*/\nexport class AccountTransactionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<AccountTransactionResource> {\n    \n    /**\n    * Returns individual AccountsTransactionResource with a given id\n    */\n    withId = (id: string|number) : AccountTransactionResource => {\n        return new AccountTransactionResource(id, this.getPath(), this._client);\n    }\n    \n    /**\n    * Exports transaction history into signed pdf\n    */\n    export = (params: ExportTransactionsParameters): Promise<{}> => {\n        \n        // transform \"fields\" parameter to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n        \n        // transform Date objects to ISO strings\n        CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n        \n        // insert 'cz' resource into the resource's path once because the api requires it in some resources\n        var path = this.getPath().replace('/my', '/cz/my');   \n        \n        return this._client.callApi(`${path}/export`, 'POST', params, null, null, 'arraybuffer');\n    }\n}\n\n/**\n* Allows to add or change a client's personal transaction note and mark the transaction as favorite/important for one specific transaction on selected account.\n*/\nexport class AccountTransactionResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkTransactionResponse> {\n    \n    /**\n    * Adds, changes of marks transaction\n    */  \n    update = (payload: AddNoteAndMarkTransactionRequest): Promise<AddNoteAndMarkTransactionResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/transactions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Revolve a loan\n*/\nexport class AccountTransferResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<TransferRequest, TransferResponse> {\n    \n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n    \n    /**\n    * Revolves the loan. Currently only REVOLVING_LOAN subtype is supported.\n    */  \n    update = (payload: TransferRequest): Promise<TransferResponse> => {\n        \n        // transform Date objects to ISO strings\n        CSCoreSDK.EntityUtils.transformDatesToSimpleISO('transferDate', payload);\n        \n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n            \n            return response;\n        })\n    }\n}\n\nexport interface TransferResponse extends CSCoreSDK.Signable {}\n\nexport interface TransferRequest {\n    \n   /**\n    * Type of the transfer. Currently only REVOLVING_LOAN_DISBURSEMENT is supported.\n    */\n    type: string;\n    \n    /**\n    * Amount which should be transfered.\n    */\n    amount: Amount;\n    \n    /**\n    * Payment transfer date.\n    */\n    transferDate: Date;\n    \n    /**\n    * Note for the recipient.\n    */\n    recipientNote?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/transfer.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountNumber, Amount, NetbankingParameters, Symbols} from '../common';\n\nexport class AccountStandingOrdersResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<StandingOrder>, CSCoreSDK.HasInstanceResource<AccountStandingOrderResource>, CSCoreSDK.CreateEnabled<CreateStandingOrderRequest, StandingOrderResponse> {\n    \n    /**\n     * Returns list of actual standing/sweep orders for accounts of the current user.\n     */\n    list = (params: NetbankingParameters): Promise<StandingOrderList> => {\n\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'standingOrders', params, response => {\n\n            response.items.forEach(item => {\n                addDatesToStandingOrder(item);\n                resourcifyStandingOrder(<StandingOrder>item, this.withId((<StandingOrder>item).number));\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Get the resource of standing order with a given id\n     */\n    withId = (id: string): AccountStandingOrderResource => {\n        return new AccountStandingOrderResource(id, this.getPath(), this.getClient());\n    }\n\n    /**\n     * Resource for creating standing/sweep order. Once order has been signed new payments are generated and executed according its settings.\n     */\n    create = (payload: CreateStandingOrderRequest): Promise<StandingOrderResponse> => {\n\n        CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['nextExecutionDate', 'lastExecutionDate', 'startDate'], payload);\n\n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n            addDatesToStandingOrder(response);\n            resourcifyStandingOrder(<StandingOrder>response, this.withId((<StandingOrder>response).number));\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nexport class AccountStandingOrderResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<StandingOrder>, CSCoreSDK.DeleteEnabled<StandingOrderResponse> {\n    \n    /**\n     * Returns detail of actual standing/sweep orders identified by its number.\n     */\n    get = (): Promise<StandingOrder> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            addDatesToStandingOrder(response);\n            resourcifyStandingOrder(<StandingOrder>response, this);\n\n            return response;\n        });\n    }\n\n    /**\n     * This call removes existing standing/sweep order. No more payments for the order are executed after the change has been signed.\n     */\n    delete = (): Promise<StandingOrderResponse> => {\n        return CSCoreSDK.ResourceUtils.CallDelete(this, null).then(response => {\n            addDatesToStandingOrder(response);\n            resourcifyStandingOrder(<StandingOrder>response, this);\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n            \n            return response;\n        });\n    }\n}\n\nfunction addDatesToStandingOrder(item) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'realExecutionDate', 'nextExecutionDate', 'lastExecutionDate'], item);\n    if((<StandingOrder>item).break) {\n        CSCoreSDK.EntityUtils.addDatesFromISO(['validFromDate', 'validToDate'], (<StandingOrder>item).break);\n    }\n    if((<StandingOrder>item).scheduledExecutionDates && Array.isArray((<StandingOrder>item).scheduledExecutionDates)) {\n        var datesArr: any = (<StandingOrder>item).scheduledExecutionDates.map(x => new Date(CSCoreSDK.EntityUtils.parseISODate(x)));\n\n        (<StandingOrder>item).scheduledExecutionDates = datesArr;\n    }\n}\n\nfunction resourcifyStandingOrder(orderListing: StandingOrder, orderReference: AccountStandingOrderResource) {\n    orderListing.get = orderReference.get;\n    orderListing.delete = orderReference.delete;\n}\n\nexport interface StandingOrderList extends CSCoreSDK.PaginatedListResponse<StandingOrder> {}\n\nexport interface StandingOrder extends CreateStandingOrderRequest {\n\n    /**\n     * Standing order respectively sweep order identifier.\n     */\n    number: string;\n\n\n    /**\n     * Represents the status of the order. Only possible value so far is OK.\n     */\n    status: string;\n\n    /**\n     * Maximum number of iterations - processing of the standing order. Only applicable in combination with executionMode.\n     */\n    maxIterations: number;\n\n    /**\n     * Maximum amount to be transferred using the standing order. Only applicable in combination with executionMode.\n     */\n    maxAmount: Amount;\n\n    /**\n     * Date and time since the order is valid from.\n     */\n    startDate: Date | string;\n\n    /**\n     * Array of execution dates (DATEs) when payments will be executed from this standing order since today until today + 30 days.\n     */\n    scheduledExecutionDates?: [Date];\n\n    /**\n     * Date when the next order will be really executed taking into account weekends and holidays.\n     */\n    realExecutionDate?: Date;\n\n    break?: {\n\n        /**\n         * Start date of break period. Standing order will not be processed from this date.\n         */\n        validFromDate: Date;\n\n        /**\n         * End date of break period. Standing order will not be processed to this date.\n         */\n        validToDate: Date;\n    }\n\n    /**\n     * List of months where there is no payment (only applicable with interval IRREGULAR). Possible values: JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER, OCTOBER, NOVEMBER, DECEMBER\n     */\n    stoppages?: [string];\n\n    /**\n     * Array of optional Flag values to Standing Order. Possible flags: deletable.\n     */\n    flags?: [string];\n\n    /**\n     * Convience method for getting standing order detail\n     */\n    get: () => Promise<StandingOrder>;\n\n    /**\n     * Conveinience method for deleting standing order\n     */\n    delete: () => Promise<StandingOrderResponse>;\n}\n\nexport interface StandingOrderResponse extends StandingOrder, CSCoreSDK.Signable {}\n\nexport interface CreateStandingOrderRequest {\n\n    /**\n     * Either STANDING_ORDER (there is fixed amount specified which is transferred in defined times) or SWEEP_ORDER (there is specified limit, amount over limit/to limit is transferred in defined times).\n     */\n    type: string;\n\n    /**\n     * Relevant only for sweep orders. Either SWEEP_OVER_LIMIT (amount over limit is transferred from account) or SWEEP_UNDER_LIMIT (amount to limit is transferred to account).\n     */\n    subtype?: string;\n\n    /**\n     * Alias name of standing order entered by user for his better orientation in standing order list.\n     */\n    alias?: string;\n\n    /**\n     * Name of the standing order receiver.\n     */\n    receiverName?: string;\n\n    /**\n     * Receiver account number. In case of SWEEP_UNDER_LIMIT this is actually sender.\n     */\n    receiver: AccountNumber;\n\n    /**\n     * Message for payee set during payment order creation. It is used to identify transaction on receiver side.\n     */\n    senderReference?: string;\n\n    /**\n     * The amount of the order in case of standing order. The limit amount in case of sweep order.\n     */\n    amount: Amount;\n\n    /**\n     * Date when the next order is set to be executed. This includes weekends and banking holidays.\n     */\n    nextExecutionDate?: Date | string;\n\n    /**\n     * Date when the last order will be processed. Only applicable in combination with executionMode .\n     */\n    lastExecutionDate?: Date | string;\n\n    /**\n     * The execution mode defines when or how standing/sweep order will be cancelled, processed the last time. Possible values: UNTIL_DATE (standing order is valid until specific date - field lastExecutionDate), UNTIL_CANCELLATION (standing order is valid forever and must be cancelled by client), AFTER_MAX_ITERATION_EXCEEDED (certain count of executions is specified - field maxIterations) or MAX_AMOUNT_EXCEEDED (maximum amount which can be transferred for this order is specified, if next iteration would exceed this amount it is not executed - field maxAmount).\n     */\n    executionMode: string;\n\n    /**\n     * The execution due mode defines how the date when order should be executed is specified. Possible values: DUE_DAY_OF_MONTH (specific number of day in the month is defined) or DUE_LAST_DAY_OF_MONTH (order is executed on last day of particular month).\n     */\n    executionDueMode: string;\n\n    /**\n     * Execution interval defines how often order is executed. Possible values: DAILY, WEEKLY, MONTHLY, BI_MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, IRREGULAR.\n     */\n    executionInterval: string;\n\n    /**\n     * Value represents order number of the day within particular period when the standing order will be reqularly executed. Possible values: 1-7 (for WEEKLY interval), 1-28 for STANDING_ORDER, 1-27 for type SWEEP_ORDER (for MONTHLY, QUARTERLY, HALFYEARLY and YEARLY - for intervals longer then month also intervalDueMonth is applicable). Field is not relevant for other execution intervals.\n     */\n    intervalDueDay?: number;\n\n    /**\n     * Due date month in execution interval of standing order processing. Represents order number of the month in particular period. Possible values: 1-2 for BI_MONTHLY, 1-3 for QUARTERLY, 1-6 for HALFYEARLY, 1-12 for YEARLY. Field is not relevant for other execution intervals.\n     */\n    intervalDueMonth?: number;\n\n    symbols?: Symbols;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/standing-orders.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountNumber, Amount, NetbankingParameters, Symbols} from '../common';\n\nexport class AccountDirectDebitsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<DirectDebit>, CSCoreSDK.HasInstanceResource<AccountDirectDebitResource>, CSCoreSDK.CreateEnabled<DirectDebit, SignableDirectDebit> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Resource Direct Debit List represents collection of all direct debit approvals entered by user for the specified user\n     */\n    list = (params: NetbankingParameters): Promise<DirectDebitList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'directDebits', params, response => {\n\n            CSCoreSDK.EntityUtils.addDatesToItems(['startDate', 'endDate', 'versionValidityDate'], response);\n\n            return response;\n        });\n    }\n\n    /**\n     * Get the resource of direct debit with a given id\n     */\n    withId = (id: string): AccountDirectDebitResource => {\n        return new AccountDirectDebitResource(id, this.getPath(), this.getClient());\n    }\n\n    /**\n     * Resource for creating (or allowing) direct debit on certain account. Once signed it can be used by receiver party.\n     */\n    create = (payload: DirectDebit): Promise<SignableDirectDebit> => {\n\n        CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['startDate', 'endDate'], payload);\n\n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n\n            CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n            \n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nexport class AccountDirectDebitResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<DirectDebit>, CSCoreSDK.DeleteEnabled<SignableDirectDebit> {\n\n    /**\n     * Get the single direct debits detail.\n     */\n    get = (): Promise<DirectDebit> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n            CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\n            return response;\n        });\n    }\n\n    /**\n     * Resource for deleting direct debit (permission) on certain account. Once signed no more transfers can be made by receiver party.\n     */\n    delete = (): Promise<SignableDirectDebit> => {\n        return CSCoreSDK.ResourceUtils.CallDelete(this, null).then(response => {\n\n            CSCoreSDK.EntityUtils.addDatesFromISO(['startDate', 'endDate', 'versionValidityDate'], response);\n\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nexport interface DirectDebitList extends CSCoreSDK.PaginatedListResponse<DirectDebit> {}\n\nexport interface DirectDebit {\n\n    /**\n     * Order number of the direct debit approval. It is unique per approval. Several versions of an approval have the same order number.\n     */\n    number?: string;\n\n    /**\n     * Type of the approval. Possible values are DIRECT_DEBIT or SIPO.\n     */\n    type: string;\n\n    /**\n     * Name of the direct debit receiver.\n     */\n    receiverName?: string; \n\n    /**\n     * Account number of the receiver.\n     */\n    receiver: AccountNumber;\n\n    /**\n     * Approval name chosen by the user.\n     */\n    alias?: string;\n\n    /**\n     * Limit for the single direct debit.\n     */\n    limit?: Amount;\n\n    /**\n     * Limit for the whole period.\n     */\n    limitSum?: Amount;\n\n    /**\n     * Limit for the number of direct debits for the period.\n     */\n    numberLimit?: number;\n\n    /**\n     * Beginning date for the approval.\n     */\n    startDate: Date | string;\n\n    /**\n     * End date for the approval.\n     */\n    endDate?: Date | string;\n\n    /**\n     * Symbols structure for Variable symbol, Specific symbol, Constant symbol.\n     */\n    symbols?: Symbols;\n\n    /**\n     * The order of the month in the period when direct debits are acceptable. This must he null for period at least one month.\n     */\n    dueMonth?: number;\n\n    /**\n     * The number of the day in month. From this day direct debits are acceptable. This can be not null only for period longer then one month.\n     */\n    dayFrom?: number;\n\n    /**\n     * The number of the day in month. To this day direct debits are acceptable.\n     */\n    dayTo?: number;\n\n    /**\n     * Unique identifier for version of the direct debit approval.\n     */\n    versionId?: number;\n\n    /**\n     * Date when the version comes into use.\n     */\n    versionValidityDate?: Date;\n\n    /**\n     * Number of period cycles in one period.\n     */\n    periodicity: number;\n\n    /**\n     * Unit of the period cycle. Possible values are HALFYEARLY, MONTHLY, QUARTERLY, YEARLY, DAILY, WEEKLY, OTHER.\n     */\n    periodCycle: string;\n}\n\nexport interface SignableDirectDebit extends DirectDebit,  CSCoreSDK.Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/accounts/direct-debits.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {LastLoginsResource} from './lastLogins';\n\n/**\n* Get information about the profile and past logins.\n*/\nexport class ProfileResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<Profile> {\n    \n    /** \n     * Returns information about the profile \n     */  \n    get = (): Promise<Profile> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(profile => {\n            \n            if((<Profile>profile).lastlogin) {\n                \n                // transform ISO dates to native Date objects\n                CSCoreSDK.EntityUtils.addDatesFromISO('lastlogin', profile);   \n            }\n            \n            return profile;\n        });\n    }\n    \n    /** \n     * Returns LastLoginsResource for listing past logins\n     */\n    get lastLogins() {\n        return new LastLoginsResource(this.getPath() + '/logininfo', this.getClient());\n    }\n}\n\nexport interface Profile {\n    \n    /**\n    * user's first name\n    */\n    firstName: string;\n    \n    /**\n    * user's last name\n    */\n    lastName: string;\n    \n    /**\n    * user's name used for salutation\n    */\n    salutation?: string;\n    \n    /**\n    * customer's id a.k.a cluid\n    */\n    customerId: string;\n    \n    /**\n    * number of institute\n    */\n    institudeId: number;\n    \n    /**\n    * Has the customer approved §107 telecommunication act. Possible values: ACCEPTED, NOT_ACCEPTED, UNKNOWN.\n    */\n    marketingInfoAcceptance: string;\n    \n    /**\n    * user's gender. Possible values: MALE, FEMALE, UNKNOWN.\n    */\n    gender: string;\n    \n    /**\n    * Date and time of the last login of customer. Common last login for all client applications - George, QC, etc.\n    */\n    lastlogin?: Date;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/profile/profile.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\n/** \n * List all past logins\n */\nexport class LastLoginsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<LastLoginInfo> {\n    \n    /** \n     * Returns promise with a list of past logins\n     */ \n    list = () : Promise<LastLoginList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'lastlogin').then(response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('lastlogin', response); \n            \n            return response;\n        });\n    }\n}\n\nexport interface LastLoginList extends CSCoreSDK.ListResponse<LastLoginInfo> {}\n\nexport interface LastLoginInfo {\n    \n    /**\n    * Channel of the last login. \n    */\n    channel: string;\n    \n    /**\n    * Date of the last login.\n    */\n    lastlogin: Date;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/profile/lastLogins.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, AccountNumber, Signable, NetbankingParameters} from '../common';\nimport {CardDeliveryResource} from './delivery';\nimport {CardTransactionsResource} from './transactions';\nimport {CardActionsResource} from './actions';\nimport {CardLimitsResource} from './limits';\nimport {CardSecure3DResource} from './secure3D';\nimport {CardTransferResource} from './transfer';\nimport {CardAccountsResource} from './statements';\n\n    \n/**\n* Represents list of payment cards (either debet or credit) for current user. Every card was issued for current user or belongs to one of his accounts.\n*/\nexport class CardsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Card>, CSCoreSDK.HasInstanceResource<CardResource> {\n    \n    /**\n    * List all cards \n    */  \n    list = (params?: NetbankingParameters) : Promise<CardList> => {\n        \n        // transform \"sort\" and \"order\" parameters to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n        \n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'cards', params, response => {\n            \n            response.items.forEach(item => {\n                \n                // add convenient methods to items in the list\n                resourcifyListing(<Card>item, this.withId((<Card>item).id), true);\n                \n                // transform ISO dates to native Date objects\n                transformResponse(item);\n            });\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Get a resource for card with a given id \n    */  \n    withId = (id: string) : CardResource => {\n        return new CardResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class CardResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Card>, CSCoreSDK.UpdateEnabled<ChangeCardSettingsRequest, ChangeCardSettingsResponse> {\n    \n    /**\n    * Get detail of the card \n    */  \n    get = () : Promise<Card> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(card => {\n            \n            // add convenient methods to items in the list\n            resourcifyListing(<Card>card, this, false);\n            \n            // transform ISO dates to native Date objects\n            transformResponse(card);\n            \n            return card;\n        });\n    }\n    \n    /**\n    * Update card's alias \n    */  \n    update = (payload: ChangeCardSettingsRequest): Promise<ChangeCardSettingsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(card => {\n            \n            // add convenient methods to items in the list\n            resourcifyListing(<Card>card, this, false);\n            \n            // transform ISO dates to native Date objects\n            transformResponse(card);\n            \n            return card;\n        })\n    }\n    \n    /**\n    * Get current delivery settings\n    */  \n    get delivery() {\n        return new CardDeliveryResource(this.getPath() + '/delivery', this._client);\n    }\n    \n    /**\n    * Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n    */\n    get transactions() {\n        return new CardTransactionsResource(this.getPath() + '/transactions', this._client);\n    }\n    \n    /**\n    * Issue various actions on a single card. Currently supported actions are: \n    * reissue pin, lock card, unlock card, activate card, set automatic card replacement on, set automatic card replacement off, replacement card request\n    */\n    get actions() {\n        return new CardActionsResource(this.getPath() + '/states', this._client);\n    }\n    \n    /**\n    * Get information about different limits\n    */\n    get limits() {\n        return new CardLimitsResource(this.getPath() + '/card-limits', this._client);\n    }\n    \n    /**\n    * Get the 3D secure online shopping status\n    */\n    get secure3d() {\n        return new CardSecure3DResource(this.getPath() + '/secure-online-shopping', this._client);\n    }\n    \n    /**\n    * Resource for paying up credit card debt\n    */\n    get transfer() {\n        return new CardTransferResource(this.getPath() + '/transfer', this._client);\n    }\n    \n    /**\n    * Account resource for listing statements\n    */\n    get accounts() {\n        return new CardAccountsResource(this.getPath() + '/mainaccount', this._client);\n    }\n}\n\nfunction resourcifyListing(itemListing: Card, itemResource: CardResource, isFromList: boolean) {\n    if(isFromList) {\n        itemListing.get = itemResource.get;    \n    }\n    itemListing.update = itemResource.update;\n    itemListing.delivery = itemResource.delivery;\n    itemListing.transactions = itemResource.transactions;\n    itemListing.actions = itemResource.actions;\n    itemListing.limits = itemResource.limits;\n    itemListing.secure3d = itemResource.secure3d;\n    itemListing.transfer = itemResource.transfer;\n    itemListing.accounts = itemResource.accounts;\n}\n\nfunction transformResponse(item) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['expiryDate', 'validFromDate'], item);\n}\n\nexport interface CardList extends CSCoreSDK.PaginatedListResponse<Card> {}\n\nexport interface Card {\n    \n    /**\n    * unique product id\n    */\n    id: string;\n    \n    /**\n    * Users product name. Max. 50 characters.\n    */\n    alias?: string;\n    \n    /**\n    * product owner\n    */\n    owner: string;\n    \n    /**\n    * card number\n    */\n    number: string;\n    \n    /**\n    * Card sequence number. The number distinguishing between separate cards (different plastic cards) with the same Primary Account Number (PAN)\n    */\n    sequenceNumber: string;\n    \n    /**\n    * Localized product name.\n    */\n    productI18N: string;\n    \n    /**\n    * Internal product code.\n    */\n    productCode?: string;\n    \n    /**\n    * Expiration date of particular plastic card\n    */\n    expiryDate?: Date;\n    \n    /**\n    * Date from which this particular plastic card is valid\n    */\n    validFromDate?: Date;\n    \n    /**\n    * Current state of card. Possible values: ACTIVE, INACTIVE (issued card not activated yet), TEMPORARY_BLOCKED.\n    */\n    state: string;\n    \n    /**\n    * Type of card: credit, debit/bankcard. Possible Values: BANK_CARD (used for debit card too), CREDIT\n    */\n    type: string;\n    \n    /**\n    * Credit card provider/issuer: Erste Bank or external bank. Possible Values: ERSTE_BANK, EXTERNAL\n    */\n    provider: string;\n    \n    /**\n    * Indicates reason for locking the card. Possible Values: THEFT, LOSS, FRAUD, OTHER\n    */\n    lockReason?: string;\n    \n    /**\n    * Card characteristics. Possible values: MAIN, AUTHORIZED\n    */\n    characteristics?: string;\n    \n    /**\n    * For credit card: Loan limit for card (shadow) account.\n    */\n    limit?: Amount;\n    \n    /**\n    * Disposable balance of current account linked to debit/bank card or Available balance of credit card (disposable balance of shadow account). Not available for all cards or states (locked, closed, unknown).\n    */\n    balance?: Amount;\n    \n    /**\n    * Total outstanding/owed amount for credit card (the last known value).\n    */\n    outstandingAmount?: Amount;\n    \n    /**\n    * Minimal installment repayment amount for credit card (at previous cycle end date).\n    */\n    minimalMonthlyAmount?: Amount;\n    \n    /**\n    * Installment repayment due date.\n    */\n    installmentDueDate?: Date;\n    \n    /**\n    * Information about the main account.\n    */\n    mainAccount?: CardMainAccount;\n    \n    /**\n    * Information about the main account's limits.\n    */\n    \"cz-overallCardAccountLimits\"?: CardAccountLimits;\n    \n    /**\n    * Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD.\n    */\n    cardDeliveryMode?: string;\n    \n    /**\n    * Array of optional features valid for given card.\n    */\n    features?: [string];\n    \n    /**\n    * Array of optional Flag values depends on Card type.\n    */\n    flags?: [string];\n    \n    /**\n     * Convenience method for getting detail of the card right from the list \n     */\n    get: () => Promise<Card>;\n    \n    /**\n    * Convenience method for updating card's settings\n    */\n    update: (payload: ChangeCardSettingsRequest) => Promise<ChangeCardSettingsResponse>;\n    \n    /**\n    * Convenience getter for getting card's delivery resource\n    */\n    delivery: CardDeliveryResource;\n    \n    /**\n    * Convenience getter for getting card's transactions resource\n    */\n    transactions: CardTransactionsResource;\n    \n    /**\n    * Convenience getter for getting card's actions resource\n    */\n    actions: CardActionsResource;\n    \n    /**\n    * Convenience getter for getting card's limits resource\n    */\n    limits: CardLimitsResource;\n    \n    /**\n    * Convenience getter for getting card's 3D Secure resource\n    */\n    secure3d: CardSecure3DResource;\n    \n    /**\n    * Convenience getter for getting card's transfer resource\n    */\n    transfer: CardTransferResource;\n    \n    /**\n    * Convenience getter for getting card's accounts resource\n    */\n    accounts: CardAccountsResource;\n}\n\nexport interface CardAccountLimits {\n    \n    /**\n    * Daily ATM limit on credit line. Daily ATM limit for all credit cards issued to mainAccount.\n    */\n    limitATM?: Amount;\n    \n    /**\n    * Daily POS limit on credit line. Daily POS limit for all credit cards issued to mainAccount.\n    */\n    limitPOS?: Amount;\n}\n\nexport interface CardMainAccount {\n    \n    /**\n    * Internal ID as reference for account provided by BE\n    */\n    id?: string;\n    \n    /**\n    * Full name of the main account's holder.\n    */\n    holderName: string;\n    \n    /**\n    * Main account is credit card shadow account for credit card or linked main current account for bank/debit card.\n    */\n    accountno: AccountNumber;\n}\n\nexport interface ChangeCardSettingsResponse extends Card, Signable {\n    \n    /**\n    * ID of the branch\n    */\n    branchId?: string;\n} \n\nexport interface ChangeCardSettingsRequest {\n    \n    /**\n    * Alias of the card\n    */\n    alias?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/cards.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signable, Address} from '../common';\n\n/**\n * Get current delivery settings\n */\n// export class CardDeliveryResource extends CSCoreSDK.Resource\n// implements CSCoreSDK.GetEnabled<DeliveryListing>, CSCoreSDK.UpdateEnabled<ChangeDeliverySettingsRequest, ChangeDeliverySettingsResponse> {\nexport class CardDeliveryResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<DeliveryListing> {\n    \n    /**\n     * Returns current delivery settings  \n     */ \n    get = () : Promise<DeliveryListing> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n    \n    /**\n     * Change current delivery settings  \n     */ \n    update = (payload: ChangeDeliverySettingsRequest): Promise<ChangeDeliverySettingsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n} \n\nexport interface DeliveryListing {\n    \n    /**\n    * Type of the delivery which should be set for this card. Possible values are BRANCH, OTHER_BRANCH, HOME, ADDRESS_ABROAD.\n    */\n    cardDeliveryMode: string;\n    \n    /**\n    * Identification of the branch where card will be ready to takeover.\n    */\n    branchId: string;\n    \n    /**\n    * Address where card should be sent.\n    */\n    address: Address;\n    \n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\nexport interface Confirmation {\n    \n    /**\n    * Email\n    */\n    email: string;\n    \n    /**\n    * Language\n    */\n    language: string;\n}\n\nexport interface ChangeDeliverySettingsResponse extends DeliveryListing, Signable {}\n\nexport interface ChangeDeliverySettingsRequest {\n    \n    /**\n    * Indicates how a client receives their card and pin. Possible values: BRANCH, HOME, OTHER_BRANCH, ADDRESS_ABROAD.\n    */\n    cardDeliveryMode: string;\n    \n    /**\n    * ID of a branch where card should be sent.\n    */\n    branchId?: string;\n    \n    /**\n    * Address where card should be sent.\n    */\n    address?: Address;\n    \n    /**\n    * Phone number of the client.\n    */\n    deliveryPhone?: string;\n    \n    /**\n    * Information about the confirmation\n    */\n    confirmations: [Confirmation];  \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/delivery.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AddNoteAndMarkTransactionRequest, ExportTransactionsParameters, Transaction, Signable} from '../common';\n\n/**\n* Allows to add or change a client's personal note and mark/star the card transaction as favorite/important for one specific transaction\n*/\nexport class CardTransactionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<CardTransactionResource> {\n    \n    /**\n     * Returns CardTransactionResource for a given id\n     */\n    withId = (id: string) : CardTransactionResource => {\n        return new CardTransactionResource(id, this.getPath(), this._client);\n    }\n    \n    /**\n     * Export transactions to PDF\n     */ \n    export = (params: ExportTransactionsParameters) : Promise<any> => {\n        \n        // transform \"fields\" parameter to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n        \n        // transform Date objects to ISO strings\n        CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n        \n        // insert 'cz' resource into the resource's path once because the api requires it in some resources\n        var path = this.getPath().replace('/my', '/cz/my');\n        \n        return this._client.callApi(`${path}/export`, 'POST', params, null, null, 'arraybuffer');\n    }\n}\n\n/**\n * Add or change a client's personal note and mark/star the card transaction as favorite/important\n */ \nexport class CardTransactionResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<AddNoteAndMarkTransactionRequest, AddNoteAndMarkCardTransactionResponse> {\n    \n    /**\n    * Adds, changes of marks transaction\n    */ \n    update = (payload: AddNoteAndMarkTransactionRequest): Promise<AddNoteAndMarkCardTransactionResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n}\n\nexport interface AddNoteAndMarkCardTransactionResponse extends Signable {\n    cardTransaction: Transaction;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/transactions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signable} from '../common';\nimport {Confirmation} from './delivery';\n\n/**\n * Issue various actions on a single card. \n */\nexport class CardActionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<CardActionRequest, CardActionResponse> {\n    \n    /**\n     * Issues various actions on a single card  \n     */ \n    update = (payload: CardActionRequest): Promise<CardActionResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n            \n            return response;\n        })\n    } \n}\n\nexport interface CardActionResponse extends CSCoreSDK.Signable {}\n\nexport interface CardActionRequest {\n    \n   /**\n    * Action which should be issued. Possible values are \"REISSUE_PIN\", \"LOCK_CARD\", \"UNLOCK_CARD\", \"REPLACE_CARD\", \"ACTIVATE_CARD\", \"SET_AUTOMATIC_REPLACEMENT_ON\", \"SET_AUTOMATIC_REPLACEMENT_OFF\".\n    */\n    action: string;\n    \n    /**\n    * Reason why card should be locked. Possible values are \"THEFT\" and \"LOSS\". Relevant only for action \"LOCK_CARD\".\n    */\n    lockReason?: string;\n    \n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/actions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\nimport {Confirmation} from './delivery';\n\n/**\n* Get information about different limits\n*/\nexport class CardLimitsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<CardLimit>, CSCoreSDK.UpdateEnabled<ChangeCardLimitsRequest, ChangeCardLimitsResponse> {\n    \n    /**\n     * List all limits  \n     */ \n    list = () : Promise<CardLimitsList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'limits').then(response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('temporaryLimitExpiration', response);\n            \n            return response;\n        })\n    }\n    \n    /**\n     * Update individual limits  \n     */ \n    update = (payload: ChangeCardLimitsRequest): Promise<ChangeCardLimitsResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('temporaryLimitExpiration', response, 'limits');\n            \n           // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n             \n            return response;\n        })\n    }\n}\n\nexport interface CardLimitsList extends CSCoreSDK.ListResponse<CardLimit> {}\n\nexport interface CardLimit {\n    \n    /**\n    * Limit type defines ATM, POS, internet/eCommerce, total limits. Possible Values: ATM, POS, INTERNET\n    */\n    limitType: string;\n    \n    /**\n    * Bank limit's period in days defined for limit type (default daily - 1D). Possible Values: 1D, 2D, 3D, 5D, 7D, 10D, 15D, 30D\n    */\n    limitPeriod: string;\n    \n    /**\n    * Current limit amount valid for limit's type and period\n    */\n    limit?: Amount;\n    \n    /**\n    * Temporary limit amount valid for limit's type and period\n    */\n    temporaryLimit?: Amount;\n    \n    /**\n    * Temporary limit expiration date for limit's type and period. Field is mandatory if temporatyLimits are changed by PUT call. It is possible to set temporaryLimitExpiration up to 120 hours to the future.\n    */\n    temporaryLimitExpiration?: Date;\n    \n    /**\n    * Maximum limit amount for card defined by bank valid for limit's type and period.\n    */\n    bankLimit?: Amount;\n}\n\nexport interface ChangeCardLimitsResponse extends CSCoreSDK.Signable {\n    \n    /**\n    * Card's limits\n    */\n    limits?: [CardLimit];\n    \n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\nexport interface ChangeCardLimitsRequest {\n    \n    /**\n    * Card's limits\n    */\n    limits?: [CardLimit];\n    \n    /**\n    * Information about the confirmation\n    */\n    confirmations?: [Confirmation];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/limits.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\n/**\n * Get the 3D secure online shopping status\n */\nexport class CardSecure3DResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<SecureSettings> {\n    \n    /**\n     * Returns 3D secure online shopping status\n     */ \n    get = () : Promise<SecureSettings> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n}\n\nexport interface SecureSettings {\n    \n    /**\n    * 3D secure functionality status. Possible Values: OK, NOT_ACTIVATED\n    */\n    status?: string;\n    \n    /**\n    * Personal Assurance Message (PAM) that user chose when activate 3D secure\n    */\n    pam?: string;\n    \n    /**\n    * Phone (used for OTP authentification) number Id coming from Contacts\n    */\n    phoneNumber?: string;\n    \n    /**\n    * 3D Secure language\n    */\n    language?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/secure3D.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountNumber, Amount} from '../common';\n\n/**\n * Resource for paying up credit card debt  \n */ \nexport class CardTransferResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<PayUpCreditCardRequest, PayUpCreditCardResponse> {\n    \n    /**\n     * Pays up the credit card debt and returns sign info  \n     */ \n    update = (payload: PayUpCreditCardRequest): Promise<PayUpCreditCardResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n            \n            return response;\n        })\n    }\n}\n\nexport interface PayUpCreditCardRequest {\n    \n    /**\n    * Type of the transfer. Currently only DEBT_REPAYMENT is supported.\n    */\n    type: string;\n    \n    /**\n    * Information about the sender\n    */\n    sender: Sender;\n    \n    /**\n    * Amount which should be transfered.\n    */\n    amount: Amount;   \n}\n\nexport interface Sender {\n    \n    /**\n    * Identification of the source account for the transfer.\n    */\n    id?: string;\n    \n    /**\n    * Account number of the source account for the transfer.\n    */\n    accountno: AccountNumber;\n}\n\nexport interface PayUpCreditCardResponse extends CSCoreSDK.Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/transfer.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {StatementList, Statement, NetbankingParameters, DownloadStatementParameters} from '../common';\n\n/**\n * Account resource for listing statements\n */\nexport class CardAccountsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<CardAccountResource> {\n    \n    /**\n     * Returns CardAccountResource for an account with a given id\n     */ \n    withId = (id: string): CardAccountResource => {\n        return new CardAccountResource(id, this.getPath(), this._client);\n    }\n} \n\n/**\n * Indidiual account resource with a given id\n */\nexport class CardAccountResource extends CSCoreSDK.InstanceResource {\n    \n    /**\n     * Get statements of the account\n     */ \n    get statements() {\n        return new CardStatementsResource(this.getPath() + '/statements', this._client); \n    }\n}\n\n/**\n * Get statements for an account\n */ \nexport class CardStatementsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Statement> {\n    \n    /**\n     * List all statements\n     */ \n    list = (params?: NetbankingParameters) : Promise<StatementList> => {\n        \n        // transform \"sort\" and \"order\" parameters to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n        \n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'statements', params, response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesToItems('statementDate', response)\n            \n            return response;\n        });\n    }\n    \n    /**\n     * Download PDF with statements\n     */ \n    download = (params: DownloadStatementParameters) => {\n        return CSCoreSDK.ResourceUtils.CallDownload(this, 'signed/download', 'POST', params);\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/cards/statements.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, Signable, AccountNumber, NetbankingParameters, NetbankingEmptyResponse} from '../common';\nimport {PaymentBookingDateResource} from './bookingDate';\nimport {PaymentsDomesticResource} from './domestic';\nimport {PaymentLimitsResource} from './limits';\nimport {PaymentMobileResource} from './mobile';\nimport {Symbols} from '../common';\n\n/**\n* Get information about payments orders\n*/\nexport class OrdersResource extends CSCoreSDK.Resource {\n    \n    /**\n    * Returns PaymentsResource for listing, deleting and accessing other information about payments\n    */  \n    get payments() {\n        return new PaymentsResource(this.getPath() + '/payments', this._client);\n    }\n}\n\n/**\n* List payments, get individual payment and other resources\n*/\nexport class PaymentsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<PaymentResource>, CSCoreSDK.PaginatedListEnabled<Payment> {\n    \n    /**\n    * List all payments\n    */  \n    list = (params?: NetbankingParameters): Promise<PaymentList> => {\n        \n        // transform \"sort\" and \"order\" parameters to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n        \n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'order', params, response => {\n            \n            response.items.forEach(item => {\n                \n                // transform ISO dates to native Date objects\n                CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], item);\n                \n                // Remove signInfo from response and add SigningObject with key signing\n                CSCoreSDK.SigningUtils.createSigningObject(item, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<Payment>item).id}`);\n                 \n                // add convenient get and delete methods for fetching order's detail and removing order\n                resourcifyListing(<Payment>item, this.withId((<Payment>item).id));\n            });\n            return response;\n        })\n    }\n    \n    /**\n    * Get individual payment with a given id\n    */\n    withId = (id: string|number): PaymentResource => {\n        return new PaymentResource(id, this.getPath(), this._client); \n    }\n    \n    /**\n    * Get currently available booking date\n    */\n    get bookingDate() {\n        return new PaymentBookingDateResource(this.getPath() + '/bookingdate', this._client);\n    }\n    \n    /**\n    * Create domestic payment order\n    */\n    get domestic() {\n        return new PaymentsDomesticResource(this.getPath() + '/domestic', this._client);\n    }\n    \n    /**\n    * Get remaining amounts for payment orders\n    */\n    get limits() {\n        return new PaymentLimitsResource(this.getPath() + '/limits', this._client);\n    }\n    \n    /**\n    * Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n    */\n    get mobile() {\n        return new PaymentMobileResource(this.getPath() + '/mobile', this._client);\n    }\n}\n\n/**\n* Individual Payment order resource\n*/\nexport class PaymentResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Payment>, CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {\n    \n    /**\n    * Get detail of the payment\n    */  \n    get = (): Promise<Payment> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(payment => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], payment);\n                \n            // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(payment, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<Payment>payment).id}`);\n            \n            return payment;\n        });\n    }\n    \n    /**\n    * Remove payment\n    */\n    delete = (): Promise<NetbankingEmptyResponse> => {\n        return CSCoreSDK.ResourceUtils.CallDelete(this, null);\n    }\n    \n} \n\nfunction resourcifyListing(paymentListing: Payment, paymentResource: PaymentResource) {\n    paymentListing.get = paymentResource.get;\n    paymentListing.delete = paymentResource.delete;\n}\n\nexport interface PaymentList extends CSCoreSDK.PaginatedListResponse<Payment> {}\n\nexport interface Payment extends CSCoreSDK.Signable {\n    \n    /**\n    * Internal identifier of payment order. Note that after signing of the order the id could change.\n    */\n    id: string;\n    \n    /**\n    * Transaction reference ID provided by BE when payment order was executed.\n    */\n    referenceId?: string;\n    \n    /**\n    * Payment order category determines whether payment is domestic, SEPA, international or inside the bank (domestic, but could be different processing) or between accounts of the same user (domestic, but with better fee policy). Possible values: DOMESTIC, OWN_TRANSFER, SEPA, INTERNATIONAL.\n    */\n    orderCategory: string;\n    \n    /**\n    * Payment order type (outgoing payment, outgoing direct debit, incoming direct debit) determines further transaction processing in BE. Values: PAYMENT_OUT, DIRECT_DEBIT_IN\n    */\n    orderType: string;\n    \n    /**\n    * sender name\n    */\n    senderName?: string;\n    \n    /**\n    * sender account number\n    */\n    sender: AccountNumber;\n    \n    /**\n    * receiver name\n    */\n    receiverName?: string;\n    \n    /**\n    * Receiver IBAN in case of international payments.\n    */\n    receiver: AccountNumber;\n    \n    /**\n    * payment amount\n    */\n    amount: Amount;\n    \n    /**\n    * Information about the symbols\n    */\n    symbols?: Symbols;\n    \n    /**\n    * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.\n    */\n    additionalInfo?: Info;\n    \n    /**\n    * Message for me set during payment order creation.\n    */\n    senderReference?: string;\n    \n    /**\n    * Datetime when payment order was created/updated (the last time) by user (read-only field is automatically setup/changed by BE system based on POST/PUT request).\n    */\n    executionDate?: Date;\n    \n    /**\n    * Modification date indicates the last update of payment order done by user or BE system (read-only field provided by BE).\n    */\n    modificationDate?: Date;\n    \n    /**\n    * payment transfer date\n    */\n    transferDate?: Date;\n    \n    /**\n    * Datetime till when payment order will be repeated on BE in the case of insufficient funds on account.\n    */\n    expirationDate?: Date;\n    \n    /**\n    * Date and time which should be used for default ordering of the payment orders for display.\n    */    \n    \"cz-orderingDate\": Date;\n    \n    /**\n    * Status of the payment order (details above), State of payment order presented to user on FE). Possible values: OPEN, SPOOLED, CANCELLED, CLOSED and DELETED\n    */\n    state: string;\n    \n    /**\n    * State detail of payment order provided based on BE technical states.\n    */\n    stateDetail: string;\n    \n    /**\n    * Indicator whether state (stateDetail value) of payment order is OK from user point of view. For mapping between stateDetail and stateOk indicator values see table below.\n    */\n    stateOk: boolean;\n    \n    /**\n    * description of payment order, transaction type\n    */\n    \"cz-description\"?: string;\n    \n    /**\n    * ID of the application via which this payment order was entered/modified the last time. Possible values: GEORGE, ATM_PAYMENT, ATM_OTHER, GSM, BRANCH_FE, POST_OFFICE, INTERNET_BANKING, TELEPHONE_BANKER, COLLECTION_BOX, VIDEO_BANKER and UNKNOWN.\n    */\n    applicationId?: string;\n    \n    /**\n    * ID of the channel via which this payment order was entered/modified the last time. Possible values: NET_BANKING, ATM, MOBILE_BANKING, ATM, BRANCH, POST_OFFICE, CALL_CENTRE, VIDEO_BANKING and UNKNOWN\n    */\n    channelId?: string;\n    \n    /**\n    * Receiver's address\n    */\n    receiverAddress?: string;\n    \n    /**\n    * Array of optional Flag values depends on Payment order category, type.\n    */\n    flags?: [string];\n    \n    /**\n    * Convenience method for retrieving payment's detail\n    */\n    get: () => Promise<Payment>;\n    \n    /**\n    * Convenience method for removing payment\n    */\n    delete: () => Promise<NetbankingEmptyResponse>;\n}\n\nexport interface Info {\n    \n    /**\n    * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35.\n    */\n    text4x35?: [string];\n}\n\nexport interface RemovePaymentOrderResponse extends Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/orders.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountNumber} from '../common';\n\n/**\n* Get currently available booking date\n*/\nexport class PaymentBookingDateResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<PaymentBookingDateRequest, PaymentBookingDateResponse> {\n\n    /**\n    * Returns current available booking date based on the provided account and optional payment order category parameters\n    */\n    update = (payload: PaymentBookingDateRequest): Promise<PaymentBookingDateResponse> => {\n        \n        // make copy of payload\n        payload = JSON.parse(JSON.stringify(payload));\n        \n        // get account's ID from passed object\n        var params = {\n            accountId: payload.accountId  \n        };\n        \n        delete payload.accountId;\n\n        return CSCoreSDK.ResourceUtils.CallApiWithSuffix(this, null, \"PUT\", params, payload).then(bookingDate => {\n\n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesFromISO('bookingDate', bookingDate);\n\n            return bookingDate;\n        });\n    }\n}\n\nexport interface PaymentBookingDateRequest {\n\n    /**\n    * Account's ID\n    */\n    accountId: string;\n\n    /**\n    * Receiver's account number\n    */\n    receiver?: AccountNumber;\n\n    /**\n    * Payment order priority selected by user, ENUM values: URGENT (for express payments), STANDARD.\n    */\n    priority?: string;\n}\n\nexport interface PaymentBookingDateResponse {\n\n    /**\n    * booking date value for provided account ID and payment order.\n    */\n    bookingDate: Date;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/bookingDate.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, AccountNumber, Symbols} from '../common';\nimport {Info, Payment} from './orders';\n\n/**\n* Create domestic payment order\n*/\nexport class PaymentsDomesticResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.CreateEnabled<DomesticPaymentCreateRequest, DomesticPaymentResponse> {\n    \n    /**\n    * Creates domestic payment order and returns it in promise\n    */\n    create = (payload: DomesticPaymentCreateRequest): Promise<DomesticPaymentResponse> => {\n        \n        // transform Date object to ISO strings\n        CSCoreSDK.EntityUtils.transformDatesToISO('transferDate', payload);\n        \n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n            \n            // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<DomesticPaymentResponse>response).id}`);\n            \n            return response;\n        });\n    }\n    \n    /**\n    * Returns PaymentDomesticResource resource for updating domestic payment\n    */\n    withId = (id: string): PaymentDomesticResource => {\n        return new PaymentDomesticResource(id, this.getPath(), this.getClient());\n    }\n    \n}\n\n/**\n* Update domestic payment\n*/\nexport class PaymentDomesticResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<DomesticPaymentUpdateRequest, DomesticPaymentResponse> {\n    \n    /**\n    * Updates domestic payment and returns it in promise\n    */\n    update = (payload: DomesticPaymentUpdateRequest): Promise<DomesticPaymentResponse> => {\n        \n        // add ID to payload from resource id property\n        (<FullDomesticPaymentUpdateRequest>payload).id = this._id;\n        \n        // transform Date object to ISO strings\n        CSCoreSDK.EntityUtils.transformDatesToISO('transferDate', payload);\n        \n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            // transform ISO dates to native Date objects\n            CSCoreSDK.EntityUtils.addDatesFromISO(['cz-orderingDate', 'executionDate', 'modificationDate', 'transferDate'], response);\n            \n            // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), `${this.getClient().getPath()}/orders/payments/${(<DomesticPaymentResponse>response).id}`);\n            \n            return response;\n        });\n    }\n}\n\nexport interface FullDomesticPaymentUpdateRequest extends DomesticPaymentUpdateRequest {\n    \n    /**\n    * Internal identifier of payment order. Note that after signing of the order the id could change.\n    */\n    id: string;\n}\n\nexport interface DomesticPaymentUpdateRequest extends DomesticPaymentCreateRequest {\n    \n    /**\n    * Status of the payment order (details above), State of payment order presented to user on FE). Possible values: OPEN, SPOOLED, CANCELLED, CLOSED and DELETED\n    */\n    state?: string;\n    \n    /**\n    * State detail of payment order provided based on BE technical states.\n    */\n    stateDetail?: string;\n    \n    /**\n    * Indicator whether state (stateDetail value) of payment order is OK from user point of view. For mapping between stateDetail and stateOk indicator values see table below.\n    */\n    stateOk?: boolean;\n}\n\nexport interface DomesticPaymentResponse extends Payment, CSCoreSDK.Signable {}\n\nexport interface DomesticPaymentCreateRequest {\n    \n    /**\n    * Name of the sender\n    */\n    senderName: string;\n    \n    /**\n    * Account number of the sender.\n    */\n    sender: DomesticPaymentAccount;\n    \n    /**\n    * Name of the payee\n    */\n    receiverName: string;\n    \n    /**\n    * Account number of payee\n    */\n    receiver: DomesticPaymentAccount;\n    \n    /**\n    * Payment order amount.\n    */\n    amount: Amount;\n    \n    /**\n    * Optional date (in the future) when this payment has to be done\n    */\n    transferDate?: Date;\n    \n    /**\n    * Message for payee set during payment order creation. It is used to identify transaction on receiver side. Array of texts 4x35\n    */\n    additionalInfo?: Info;\n    \n    /**\n    * Message for me set during payment order creation.\n    */\n    senderReference?: string;\n    \n    /**\n    * Information about the symbols\n    */\n    symbols?: Symbols;\n    \n    /**\n    * Array of optional Flag values depends on Payment order category, type.\n    */\n    flags?: [string];\n}\n\nexport interface DomesticPaymentAccount {\n    \n    /**\n    * Account number with possible prefix. Format is \"XXXXXX-NNNNNNNNNN\" if prefix is not null or \"000000\". If prefix is not provided then format is \"NNNNNNNNNN\" without leading zeros.\n    */\n    number: string;\n    \n    /**\n    * Bank Code\n    */\n    bankCode: string;\n    \n    /**\n    * Code of the Country - 2 characters; mandatoryfor international orders.\n    */\n    countryCode?: string;\n    \n    /**\n    * IBAN\n    */\n    \"cz-iban\"?: string;\n    \n    /**\n    * BIC\n    */\n    \"cz-bic\"?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/domestic.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Get remaining amounts for payment orders\n*/\nexport class PaymentLimitsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<PaymentLimit> {\n    \n    /**\n    * List all limits for payment orders\n    */  \n    list = (): Promise<PaymentLimitsList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'remainingLimits', null);\n    }\n}\n\nexport interface PaymentLimitsList extends CSCoreSDK.ListResponse<PaymentLimit> {}\n\nexport interface PaymentLimit {\n    \n    /**\n    * Authorization method type for which is limit defined. ENUM: tac, tan, sms, gridCard, eok, displayCard, mToken. Other local authorization type has to be defined.\n    */\n    authorizationType: string;\n    \n    /**\n    * ID of the channel for which is limit defined. ENUM: netBanking, mobileBanking, homeBanking, thirdParty, and unknown - remaining limit amount valid for all channels, not particulary defined.\n    */\n    channelId: string;\n    \n    /**\n    * ID of the application for which is limit defined. ENUM: George, InternetBanking and unknown - remaining limit amount valid for all applications, not particulary defined.\n    */\n    applicationId: string;\n    \n    /**\n    * Remaining Daily amount which can be transferred using particular authorization method and channel (_embedded AMOUNT type).\n    */\n    remainingAmount: Amount;   \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/limits.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\n/**\n* Recharging the credit available on prepaid cards provided by Vodafone, T-Mobile or O2.\n*/\nexport class PaymentMobileResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.CreateEnabled<MobilePaymentsRequest, MobilePaymentsResponse> {\n    \n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n    \n    /**\n    * Recharge the credit on prepaid card\n    */\n    create = (payload: MobilePaymentsRequest): Promise<MobilePaymentsResponse> => {\n        \n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n            \n            // Remove signInfo from response and add SigningObject with key signing\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n            \n            return response;\n        })\n    }\n}\n\nexport interface MobilePaymentsRequest {\n    \n    /**\n    * Type of mobile payment depending on provider of mobile services. Possible values: TOP_UP (for all operators) and INVOICE, VODAFONE_PAYMENT, MOBILE_DEPOSIT (for Vodafone).\n    */\n    paymentType: string;\n    \n    /**\n    * Phone number.\n    */\n    phoneNumber: string;\n    \n    /**\n    * Sender name\n    */\n    sender: MobilePaymentSender;\n    \n    /**\n    * Payment amount.\n    */\n    amount: Amount;\n    \n    /**\n    * Invoice number used as identifier of mobile payment on mobile service provider side (only for paymentType: INVOICE).\n    */\n    invoiceNumber?: string;\n    \n    /**\n    * Phone number used for sending of confirmation of mobile payment execution. Not available for paymentType: INVOICE.\n    */\n    confirmationPhoneNumber: string;   \n}\n\nexport interface MobilePaymentsResponse extends MobilePaymentsRequest, CSCoreSDK.Signable {}\n\nexport interface MobilePaymentSender {\n    \n    /**\n    * Account number with possible prefix. Format is \"XXXXXX-NNNNNNNNNN\" if prefix is not null or \"000000\". If prefix is not provided then format is \"NNNNNNNNNN\" without leading zeros.\n    */\n    number: string;\n    \n    /**\n    * Bank Code\n    */\n    bankCode: string;\n    \n    /**\n    * Code of the Country - 2 characters; mandatoryfor international orders.\n    */\n    countryCode?: string;\n    \n    /**\n    * IBAN\n    */\n    iban: string;\n    \n    /**\n    * BIC\n    */\n    bic: string;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/orders/mobile.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {SecurityTransactionsResource} from './transactions';\nimport {Amount, Signable} from '../common';\n\nexport class SecuritiesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Security>, CSCoreSDK.HasInstanceResource<SecurityResource> {\n    \n    /**\n     * Returns list of securities accounts for current user. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).\n     */\n    list = (params?: SecuritiesParams): Promise<SecurityList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'securitiesAccounts', params, response => {\n\n            transformDatesInSubSecAccounts(response);\n            response.items.forEach(sec => {\n                resourcifySecurity(<Security>sec, this.withId((<Security>sec).id));\n            });\n\n            return response;\n        });\n    }\n    \n    /**\n     * Get resource of security with a given id \n     */\n    withId = (id: string): SecurityResource => {\n        return new SecurityResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class SecurityResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Security>, CSCoreSDK.UpdateEnabled<SecurityRequest, SecurityResponse> {\n    \n    /**\n     * Get a single securities account with all its details. Securities account represents virtual account which holds securities titles and its shares (funds, bonds, etc.).\n     */\n    get = (): Promise<Security> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            transformDatesInSubSecAccounts(response);\n            resourcifySecurity(<Security>response, this);\n\n            return response;\n        });\n    }\n    \n    /**\n     * Allows to change a limited set of securities account-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n     */\n    update = (payload: SecurityRequest): Promise<SecurityResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            transformDatesInSubSecAccounts(response);\n            resourcifySecurity(<Security>response, this);\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n\n    /**\n     * Returns security transactions resource\n     */\n    get transactions(): SecurityTransactionsResource {\n        return new SecurityTransactionsResource(`${this.getPath()}/transactions`, this.getClient());\n    }\n}\n\nfunction transformDatesInSubSecAccounts(response) {\n    if(response.subSecAccounts && Array.isArray(response.subSecAccounts)) {\n        response.subSecAccounts.forEach(acc => {\n            CSCoreSDK.EntityUtils.addDatesFromISO('lastPriceDate', acc);\n        });\n    }\n}\n\nfunction resourcifySecurity(security: Security, securityReference: SecurityResource) {\n    security.transactions = securityReference.transactions;\n    security.get = securityReference.get;\n    security.update = securityReference.update;\n} \n\nexport interface SecurityList extends CSCoreSDK.PaginatedListResponse<Security> {}\n\nexport interface Security {\n\n    /**\n     * Product id\n     */\n    id: string;\n\n    /**\n     * Account identification number of security portfolio (MUIN)\n     */\n    accountno: string;\n\n    /**\n     * Alias for security portfolio. Max. 50 characters.\n     */\n    alias?: string;\n\n    /**\n     * Description - Securities portfolio Account name, Name of principal account holder\n     */\n    description: string;\n\n    /**\n     * Account balance value\n     */\n    balance: Amount;\n\n    /**\n     * Array of securities sub accounts\n     */\n    subSecAccounts?: [SubSecAccount];\n\n    /**\n    * Convenience getter for getting security's transactions resource\n    */\n    transactions: SecurityTransactionsResource;\n\n    /**\n     * Convenience method for getting security detail right from the list \n     */\n    get: () => Promise<Security>;\n    \n    /**\n    * Convenience method for updating security's details\n    */\n    update: (payload: SecurityRequest) => Promise<SecurityResponse>;\n}\n\n// z dokumentace\nexport interface SubSecAccount {\n\n    /**\n     * Sub Securities Account ID\n     */\n    id: string;\n\n    /**\n     * Array of the titles within sub account.\n     */\n    titles?: [{\n\n        /**\n         * Name of the security title.\n         */\n        title: string;\n\n        /**\n         * ISIN - identifier of the security title.\n         */\n        isin: string;\n\n        /**\n         * Number of securities/shares\n         */\n        numberOfShares: number;\n\n        /**\n         * Last Price of Securities title\n         */\n        lastPrice: Amount;\n\n        /**\n         * Date of securities last price evaluation\n         */\n        lastPriceDate: Date;\n\n        /**\n         * Market value of the securities title.\n         */\n        marketValue: Amount;\n\n        /**\n         * Security Product Type. Possible values: BOND, SHARE, FUND, IPO, OPTION, OTHER, INDEX, CERTIFICATE, INVESTMENT,KNOCKOUT, UNKNOWN.\n         */\n        securityType: string;\n\n        /**\n         * Security Product Group. Possible values: BONDS_AND_MORE, GUARANTEE_OF_PRINCIPAL, NO_GUARANTEE_OF_PRINCIPAL, REAL_ESTATE, SHARES, STOCK_AND_MIXED, INVESTMENT, KNOCK_OUT, UNKNOWN.\n         */\n        productGroup: string;\n\n        /**\n         * Localized security indication depending on security type and product group\n         */\n        securityIndication: string;\n    }];\n\n    /**\n     * Array of flags.\n     */\n    flags: [string]\n}\n\nexport interface SecuritiesParams extends CSCoreSDK.Paginated {}\n\nexport interface SecurityRequest {\n\n    /**\n     * Alias for security portfolio. Max. 50 characters.\n     */\n    alias?: string;\n}\n\nexport interface SecurityResponse extends Security, CSCoreSDK.Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/securities/securities.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signable, ExportTransactionsParameters} from '../common';\n\nexport class SecurityTransactionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<SecurityTransactionResource> {\n\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n        super(basePath, client);\n        \n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Get resource of security transaction with a given id\n     */\n    withId = (id: string): SecurityTransactionResource => {\n        return new SecurityTransactionResource(id, this.getPath(), this.getClient());\n    }\n\n    /**\n     * Export transaction history into signed pdf. \n     */\n    export = (params: ExportTransactionsParameters): Promise<any> => {\n\n        // transform \"fields\" parameter to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n        \n        // transform Date objects to ISO strings\n        CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);\n\n        return this._client.callApi(`${this.getPath()}/export`, 'POST', params, null, null, 'arraybuffer');\n    }\n    \n}\n\nexport class SecurityTransactionResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse> {\n\n    /**\n     * Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product.\n     */\n    update = (payload: SecurityTransactionRequest): Promise<SecurityTransactionResponse> => {\n        (<any>payload).id = this._id;\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n\n}\n\nexport interface SecurityTransactionRequest {\n\n    /**\n     * Personal, user specific note for transaction. Max. 4 000 characters.\n     */\n    note?: string;\n\n    /**\n     * List of flags.\n     */\n    flags?: [string];\n}\n\nexport interface SecurityTransactionResponse extends CSCoreSDK.Signable {\n\n    transaction: {\n\n        /**\n         * Transaction identifier.\n         */\n        id: string;\n\n        /**\n         * Personal, user specific note for transaction. Max. 4 000 characters.\n         */\n        note?: string;\n\n        /**\n         * List of flags.\n         */\n        flags?: [string];\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/securities/transactions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Signable} from '../common';\n\nexport class SettingsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<Settings>, CSCoreSDK.UpdateEnabled<Settings, SignableSettings> {\n\n    /**\n     * Returns basic user settings. \n     */\n    get = (): Promise<Settings> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n\n    /**\n     * Change user settings. Currently only language can be changed by this endpoint.\n     */\n    update = (payload: Settings): Promise<SignableSettings> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nexport interface Settings {\n\n    /**\n     * Preferred language. Possible values are cs and en.\n     */\n    language: string;\n\n    /**\n     * List of flags.\n     */\n    flags?: [string];\n}\n\nexport interface SignableSettings extends CSCoreSDK.Signable {\n\n    settings: Settings;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/settings/settings.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\nexport class ContactsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Contact>, CSCoreSDK.HasInstanceResource<ContactResource> {\n\n    /**\n     * Resource represents list of contact information for current user. It can contain addresses, phones and email addresses.\n     */\n    list = (): Promise<ContactList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'contacts');\n    }\n\n    /**\n     * Get the resource of contact with a given id\n     */\n    withId = (id: string): ContactResource => {\n        return new ContactResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class ContactResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Contact> {\n\n    /**\n     * Resource represents one specific contact information identified by its id. It can be address, phone or email address.\n     */\n    get = (): Promise<Contact> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n}\n\nexport interface ContactList extends CSCoreSDK.ListResponse<Contact> {}\n\nexport interface Contact {\n\n    /**\n     * Contact ID\n     */\n    id: string;\n\n    /**\n     * Type of contact. ENUM values: ADDRESS, PHONE, EMAIL, FAX.\n     */\n    type: string;\n\n    /**\n     * Contact flags\n     */\n    flags?: [string];\n\n    /**\n     * Contact address\n     */\n    address?: {\n\n        /**\n         * Address type. ENUM values: PERMANENT_RESIDENCE, SECONDARY_RESIDENCE, COMPANY_RESIDENCE, UNKNOWN\n         */\n        type: string;\n\n        /**\n         * Localized name of address type.\n         */\n        typeI18N: string;\n\n        description?: string;\n\n        street: string;\n\n        streetNumber?: string | number;\n\n        buildingApartment?: string | number;\n\n        zipCode: string;\n\n        city: string;\n\n        country: string;\n    }\n\n    /**\n     * Contact phone\n     */\n    phone?: {\n\n        /**\n         * Phone type. ENUM: PRIVATE, COMPANY, UNKNOWN\n         */\n        type: string;\n\n        /**\n         * Localized name of phone type.\n         */\n        typeI18N: string;\n\n        /**\n         * Country calling code as international phone number prefix. E.g.: \"0043\" or \"+43\", \"00420\" or \"+420\", \"00421\" or \"+421\"\n         */\n        countryCallingCode: string;\n\n        /**\n         * Phone number\n         */\n        phoneNumber: string;\n    }\n\n    /**\n     * Primary contact email address\n     */\n    email?: {\n\n        /**\n         * Email type. ENUM values: PRIVATE, COMPANY, UNKNOWN\n         */\n        type: string;\n\n        /**\n         * Localized name of email type.\n         */\n        typeI18N: string;\n\n        /**\n         * Email\n         */\n        email: string;\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contacts/contacts.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, AccountNumber} from '../common';\n\nexport class PluginsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Plugin>, CSCoreSDK.HasInstanceResource<PluginResource> {\n\n    /**\n     * Returns list of available plugins for current user. Plugin is application functionality which can be enabled/disabled by user.\n     */\n    list = (params: PluginsParameters): Promise<PluginList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'plugins', params, response => {\n\n            CSCoreSDK.EntityUtils.addDatesToItems(['validUntil', 'dateOfActivation'], response);            \n\n            return response;\n        });\n    }\n\n    /**\n     * Returns resource of plugin with a given id\n     */\n    withId = (id: string): PluginResource => {\n        return new PluginResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class PluginResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<UpdatePluginRequest, SignablePlugin> {\n\n    /**\n     * Activation and deactivation of the specific plugin. You can also change settlement account for given plugin and current user.\n     */\n    update = (payload: UpdatePluginRequest): Promise<SignablePlugin> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            CSCoreSDK.EntityUtils.addDatesFromISO(['validUntil', 'dateOfActivation'], response);\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nexport interface PluginList extends CSCoreSDK.PaginatedListResponse<Plugin> {}\n\nexport interface Plugin extends UpdatePluginRequest {\n\n    /**\n     * Localized name of the plugin.\n     */\n    name: string;\n\n    /**\n     * Date until plugin is valid.\n     */\n    validUntil: Date;\n\n    /**\n     * Date of activation of plugin for user.\n     */\n    dateOfActivation?: Date;\n\n    standardFees?: [{\n\n        /**\n         * Time moment of changing the plugin fee. Possible values are IMMEDIATELY, ACCOUNT_STATEMENT, UNKNOWN.\n         */\n        timeOfCharging: string;\n\n        /**\n         * Frequency period of changing the plugin fee. Possible values are MONTHLY, NON_RECURRING, UNKNOWN.\n         */\n        periodOfCharging: string;\n\n        /**\n         * Fee amount defined for this plugin.\n         */\n        amount: Amount;\n    }];\n}\n\n\nexport interface UpdatePluginRequest {\n\n    /**\n     * Plugin unique identifier.\n     */\n    productCode: string;\n\n    /**\n     * User settlement account for charging fees.\n     */\n    settlementAccount?: AccountNumber;\n\n    /**\n     * Array of optional flag values.\n     */\n    flags?: [string];   \n}\n\nexport interface PluginsParameters extends CSCoreSDK.Paginated {}\n\nexport interface SignablePlugin extends Plugin, CSCoreSDK.Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/plugins/plugins.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {BuildingsContractsResource} from './buildings/buildings';\nimport {PensionsContractsResource} from './pensions/pensions';\nimport {InsurancesContractsResource} from './insurances/insurances';\nimport {LoyaltyContractsResource} from './loyalty/loyalty';\n\nexport class ContractsResource extends CSCoreSDK.Resource {\n\n    /**\n     * Get buildings contracts resource\n     */\n    get buildings(): BuildingsContractsResource {\n        return new BuildingsContractsResource(`${this.getPath()}/buildings`, this.getClient());\n    }\n\n    /**\n     * Get pensions contracts resource\n     */\n    get pensions(): PensionsContractsResource {\n        return new PensionsContractsResource(`${this.getPath()}/pensions`, this.getClient());\n    }\n\n    /**\n     * Get insurances contracts resource\n     */\n    get insurances(): InsurancesContractsResource {\n        return new InsurancesContractsResource(`${this.getPath()}/insurances`, this.getClient());\n    }\n\n    /**\n     * Get loyalty contracts resource\n     */\n    get loyalty(): LoyaltyContractsResource {\n        return new LoyaltyContractsResource(`${this.getPath()}/loyalty`, this.getClient());\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/contracts.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {BuildingsContractsServicesResource} from './services';\nimport {ContractsTransactionsResource} from '../transactions';\nimport {AccountNumber, Amount, Signable} from '../../common'; \n\nexport class BuildingsContractsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<BuildingsContractResource>, CSCoreSDK.PaginatedListEnabled<BuildingsContract> {\n\n    /**\n     * Resource represents list of building savings for current user. It contains building savings and loans from building savings as well.\n     */\n    list = (params?: BuildingsContractsParameters): Promise<BuildingsContractList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'buildings', params, response => {\n\n            response.items.forEach(item => {\n\n                resourcifyBuildingsContracts(<BuildingsContract>item, this.withId((<BuildingsContract>item).id));\n                transformDates(item);\n            });\n\n            return response;\n        });\n    } \n\n    /**\n     * Get the resource of buildings contract with a given id\n     */\n    withId = (id: string): BuildingsContractResource => {\n        return new BuildingsContractResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class BuildingsContractResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<BuildingsContract>, CSCoreSDK.UpdateEnabled<UpdateBuildingsContractRequest, UpdateBuildingsContractResponse> {\n\n    /**\n     * Resource represents one building saving product identified by it's identifier. It can be building saving or loan from building saving.\n     */\n    get = (): Promise<BuildingsContract> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            resourcifyBuildingsContracts(<BuildingsContract>response, this);\n            transformDates(response);\n\n            return response;\n        });\n    }\n\n    /**\n     * Allows to change a limited set of building savings contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n     */\n    update = (payload: UpdateBuildingsContractRequest): Promise<UpdateBuildingsContractResponse> => {\n        (<any>payload).id = this._id;\n\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            resourcifyBuildingsContracts(<BuildingsContract>response, this);\n            transformDates(response);\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n\n    /**\n     * Get buildings contracts services resource\n     */\n    get services(): BuildingsContractsServicesResource {\n        return new BuildingsContractsServicesResource(`${this.getPath()}/services`, this.getClient());\n    }\n\n    /**\n     * Get buildings contracts transactions resource\n     */\n    get transactions(): ContractsTransactionsResource {\n        return new ContractsTransactionsResource(`${this.getPath().replace('/my', '/cz/my')}/transactions`, this.getClient());\n    }\n}\n\nfunction resourcifyBuildingsContracts(contract: BuildingsContract, contractReference: BuildingsContractResource) {\n    contract.get = contractReference.get;\n    contract.update = contractReference.update;\n    contract.services = contractReference.services;\n    contract.transactions = contractReference.transactions;    \n}\n\nfunction transformDates(contract) {\n    if(contract.saving) {\n        CSCoreSDK.EntityUtils.addDatesFromISO('expiryDate', contract.saving);\n    }\n\n    if(contract.loan) {\n        CSCoreSDK.EntityUtils.addDatesFromISO(['interestRateFromDate', 'interestRateToDate'], contract.saving);\n    }\n}\n\nexport interface BuildingsContractList extends CSCoreSDK.PaginatedListResponse<BuildingsContract> {}\n\nexport interface BuildingsContract extends UpdateBuildingsContractRequest {\n\n    /**\n     * Building saving identifier.\n     */\n    id: string;\n\n    /**\n     * Building saving account number.\n     */\n    accountno: AccountNumber;\n\n    /**\n     * Type of the account. Possible values are BUILD_SAVING and BUILD_LOAN.\n     */\n    type: string;\n\n    /**\n     * Product code.\n     */\n    product: string;\n\n    /**\n     * Product name.\n     */\n    productI18N: string;\n\n    /**\n     * Building savings account balance. For loans outstanding debt is served\n     */\n    balance: Amount;\n\n    /**\n     * Status of the contract. Possible values are ACTIVE and CLOSED.\n     */\n    status: string;\n\n    /**\n     * Debtor. Will only by set for loans.\n     */\n    contractHolders?: [string];\n\n    /**\n     * Basic credit interest rate, used for building saving deposits. Value in percentage, e.g. 1,5 will be displayed as 1,5%.\n     */\n    creditInterestRate?: number;  \n\n    /**\n     * Basic debit interest rate, used for building loan. Value in percentage, e.g. 9,5 will be displayed as 9,5%.\n     */\n    debitInterestRate?: number;\n\n    saving?: {\n\n        /**\n         * Target amount. Will not be set for loans.\n         */\n        targetAmount?: Amount;\n\n        /**\n         * Agreed monthly savings amount for building savings. Will not be set for loans.\n         */\n        agreedMonthlySavings?: Amount;\n\n        /**\n         * Notice period expiry date. Not set for loans.\n         */\n        expiryDate?: Date;\n\n        /**\n         * Remaining deposit to be paid to Building Savings till the end of this year to get annual maximal bonus.\n         */\n        bonusBearingDepositToPay?: Amount; \n    }\n\n\n    loan?: {\n\n        /**\n         * Total contracted building loan amount.\n         */\n        loanAmount?: Amount;\n\n        /**\n         * Installment part of the loan monthly repayment.\n         */\n        loanInstallment: Amount;\n\n        /**\n         * Saving part of the loan monthly repayment.\n         */\n        additionalSavings?: Amount;\n\n        /**\n         * Insurance part of the loan monthly repayment.\n         */\n        paymentInsurance?: Amount;\n\n        /**\n         * Current interest rate is valid from this date. Filled only for loans.\n         */\n        interestRateFromDate?: Date;\n\n        /**\n         * Current interest rate is valid to this date. Filled only for loans in case of variable interest rate. If interest rate is fixed, this field is empty.\n         */\n        interestRateToDate?: Date;\n    }\n\n    /**\n     * List of flags.\n     */\n    flags?: [string];\n\n    /**\n     * Convenience get method for fetching contracts detail \n     */\n    get: () => Promise<BuildingsContract>;\n\n    /**\n     * Convenience update method for updating contract\n     */\n    update: (payload: UpdateBuildingsContractRequest) => Promise<UpdateBuildingsContractResponse>;\n\n    /**\n     * Convenience getter for contracts services\n     */\n    services: BuildingsContractsServicesResource;\n\n    /**\n     * Convenience getter for contracts transactions\n     */\n    transactions: ContractsTransactionsResource;\n}\n\nexport interface BuildingsContractsParameters extends CSCoreSDK.Paginated {}\n\nexport interface UpdateBuildingsContractRequest {\n\n    /**\n     * User-specific alias of the contract. Max. 50 characters.\n     */\n    alias?: string;\n}\n\nexport interface UpdateBuildingsContractResponse extends BuildingsContract, CSCoreSDK.Signable {}\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/buildings/buildings.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {ServiceList, Service, ServiceParameters} from '../../accounts/services';\n\nexport class BuildingsContractsServicesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Service> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n        super(basePath, client);\n        \n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of services which are connected or arranged for building saving product instance.\n     */\n    list = (params?: ServiceParameters): Promise<ServiceList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'services', params, response => {\n            CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\n            return response;\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/buildings/services.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {SecurityTransactionRequest, SecurityTransactionResponse} from '../securities/transactions';\nimport {ExportTransactionsParameters} from '../common';\n\nexport class ContractsTransactionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<ContractsTransactionResource> {\n\n    /**\n     * Get contract transaction resource with a given id\n     */\n    withId = (id: string): ContractsTransactionResource => {\n        return new ContractsTransactionResource(id, this.getPath(), this.getClient());\n    }\n\n    /**\n     * Export transaction history into signed pdf. \n     */\n    export = (params: ExportTransactionsParameters): Promise<any> => {\n        \n        // transform \"fields\" parameter to comma separated list from array\n        CSCoreSDK.EntityUtils.transformArrayParamsToString(params, 'fields');\n        \n        // transform Date objects to ISO strings\n        CSCoreSDK.EntityUtils.transformDatesToISO(['dateFrom', 'dateTo'], params);   \n        \n        return this._client.callApi(`${this.getPath()}/export`, 'POST', params, null, null, 'arraybuffer');\n    }\n}\n\nexport class ContractsTransactionResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<SecurityTransactionRequest, SecurityTransactionResponse> {\n\n    /**\n     * Allows to add or change a client's personal note and mark/star the transaction as favorite/important for one specific transaction on selected product.\n     */\n    update = (payload: SecurityTransactionRequest): Promise<SecurityTransactionResponse> => {\n        (<any>payload).id = this._id;\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/transactions.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {ContractsTransactionsResource} from '../transactions';\nimport {Amount, Address, Signable} from '../../common';\n\nexport class PensionsContractsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Pension>, CSCoreSDK.HasInstanceResource<PensionsContractResource> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of pension products which belongs to current user. This includes Pension Savings, Supplementary Pension Insurance and Supplementary Pension Savings.\n     */\n    list = (params?: PensionParameters): Promise<PensionList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'pensions', params, response => {\n\n            response.items.forEach(item => {\n                transformDates(item);\n                resourcifyPension(<Pension>item, this.withId((<Pension>item).id));\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Get the resource of pension contract with a given id\n     */\n    withId = (id: string): PensionsContractResource => {\n        return new PensionsContractResource(id, this.getPath(), this.getClient());\n    } \n}\n\nexport class PensionsContractResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Pension>, CSCoreSDK.UpdateEnabled<UpdatePensionRequest, UpdatePensionResponse> {\n\n    /**\n     * Returns detail of pension product which belongs to current user. This can be Pension Saving, Supplementary Pension Insurance and Supplementary Pension Saving.\n     */\n    get = (): Promise<Pension> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            transformDates(response);\n            resourcifyPension(<Pension>response, this);\n\n            return response;\n        });\n    }\n\n    /**\n     * Allows to change a limited set of pension contract-settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n     */\n    update = (payload: UpdatePensionRequest): Promise<UpdatePensionResponse> => {\n        (<any>payload).id = this._id;\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            transformDates(response);\n            resourcifyPension(<Pension>response, this);\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n\n    /**\n     * Returns transactions resource for pension contract\n     */\n    get transactions(): ContractsTransactionsResource {\n        return new ContractsTransactionsResource(`${this.getPath()}/transactions`, this.getClient());\n    }\n}\n\nfunction transformDates(item) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['signingDate', 'validFrom', 'validTo'], item);\n    if(item.productAccount) {\n        CSCoreSDK.EntityUtils.addDatesFromISO('date', item.productAccount);\n    }\n    if(Array.isArray(item.beneficiaries)) {\n        item.beneficiaries.forEach(x => {\n            CSCoreSDK.EntityUtils.addDatesFromISO('birthDate', x);\n        });\n    }\n}\n\nfunction resourcifyPension(pension: Pension, pensionReference: PensionsContractResource) {\n    pension.get = pensionReference.get;\n    pension.update = pensionReference.update;\n    pension.transactions = pensionReference.transactions;\n}\n\nexport interface PensionList extends CSCoreSDK.PaginatedListResponse<Pension> {}\n\nexport interface Pension extends UpdatePensionRequest {\n\n    /**\n     * Product unique identifier.\n     */\n    id: string;\n    \n    /**\n     * Name of the contract owner.\n     */\n    owner?: string;\n\n    /**\n     * Date when contract was signed.\n     */\n    signingDate?: Date;\n\n    /**\n     * First day of contract validity.\n     */\n    validFrom?: Date;\n\n    /**\n     * Last day of contract validity.\n     */\n    validTo?: Date;\n\n    /**\n     * Pension contract number.\n     */\n    agreementNumber: string;\n\n    /**\n     * Contract status. Possible values: ACTIVE, TERMINATED, PENSION_PAYMENT, INTERRUPTED, PAYMENTS_SUSPENDED, PAYMENTS_DEFFERED, SETTLED, REPEALED, NEGOTIATED.\n     */\n    status: string;\n\n    productAccount: {\n\n\n        /**\n         * Account balance.\n         */\n        amount: Amount;\n\n        /**\n         * Date of the account balance validity.\n         */\n        date: Date;\n    }\n\n    /**\n     * Localized product name.\n     */\n    productI18N: string;\n\n    /**\n     * Identification of the product type.\n     */\n    product: string;\n\n    /**\n     * Identification of the product group. Possible values are SUPPLEMENTARY_INSURANCE, PENSION_SAVINGS and SUPPLEMENTARY_SAVINGS.\n     */\n    subtype: string;\n\n    /**\n     * Birth number of the product owner.\n     */\n    birthNumber: string;\n\n    /**\n     * Amount of already paid benefits.\n     */\n    paidBenefits: Amount;\n\n    strategy?: {\n\n        /**\n         * Conservative strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n         */\n        conservative?: number;\n\n        /**\n         * Balanced strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n         */\n        balanced?: number;\n\n        /**\n         * Dynamic strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n         */\n        dynamic?: number;\n\n        /**\n         * State bonds strategy share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n         */\n        stateBonds?: number;\n    }\n\n    pensionAgreed?: {\n\n        /**\n         * Indication whether old-age pension has been agreed.\n         */\n        oldAge?: boolean;\n\n        /**\n         * Indication whether disability pension has been agreed.\n         */\n        disability?: boolean;\n\n        /**\n         * Indication whether early-retirement pension has been agreed.\n         */\n        earlyRetirement?: boolean;\n    }\n\n    savingTime?: {\n\n        /**\n         * Supplementary pension saving time.\n         */\n        supplementary?: number;\n\n        /**\n         * Old-age pension saving time.\n         */\n        oldAge?: number;\n\n        /**\n         * Early-retirement saving time.\n         */\n        earlyRetirement?: number;\n    }\n\n    contribution?: {\n\n        /**\n         * Indication whether employer contribution is set up.\n         */\n        employer: boolean;\n\n        /**\n         * Participant contribution value.\n         */\n        participantAmount: Amount;\n\n        /**\n         * Other person contribution value.\n         */\n        otherPersonAmount: Amount;\n    }\n\n    supplementary?: {\n\n        /**\n         * Email used for electronic communication.\n         */\n        email?: string;\n\n        /**\n         * Phone number used for sms communication.\n         */\n        sms?: string;\n\n        /**\n         * Indication whether maximum service is set up.\n         */\n        maxService?: boolean;\n\n        /**\n         * Indication whether optimum service is set up.\n         */\n        optService?: boolean;\n    }\n\n    \n    beneficiaries?: {\n\n        /**\n         * Beneficiary name.\n         */\n        name: string;\n\n        /**\n         * Beneficiary birth date.\n         */\n        birthDate: Date;\n\n        /**\n         * Beneficiary birth number.\n         */\n        birthNumber: string;\n\n        /**\n         * Address where card should be sent.\n         */\n        address?: Address;\n\n        /**\n         * Beneficiary share. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n         */\n        share: number;\n\n        /**\n         * Entitlement type. Possible values TAKEOVER.\n         */\n        entitlement?: string;\n    }\n\n    /**\n     * Array of flags.\n     */\n    flags?: [string];\n\n    /**\n     * Convenience get method for fetching Pensions detail\n     */\n    get: () => Promise<Pension>;\n\n    /**\n     * Convenience update method for updating Pension\n     */\n    update: (payload: UpdatePensionRequest) => Promise<UpdatePensionResponse>;\n\n    /**\n     * Convenience getter for getting Pensions transactions resource\n     */\n    transactions: ContractsTransactionsResource;\n}\n\nexport interface UpdatePensionRequest {\n\n    /**\n     * User defined account name. Max. 50 characters.\n     */\n    alias?: string;\n}\n\nexport interface UpdatePensionResponse extends CSCoreSDK.Signable, Pension {}\n\nexport interface PensionParameters extends CSCoreSDK.Paginated {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/pensions/pensions.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {InsurancesContractFundsResource} from './funds';\nimport {InsurancesContractBeneficiariesResource} from './beneficiaries';\nimport {InsurancesContractInsureesResource} from './insurees';\nimport {InsurancesContractPaymentsResource} from './payments';\nimport {InsurancesContractServicesResource} from './services';\nimport {InsurancesContractEventsResource} from './events';\nimport {InsurancesContractTaxBenefitsResource} from './tax-benefits';\nimport {InsurancesContractStrategiesResource} from './strategies';\nimport {InsurancesContractTransferResource} from './transfer';\nimport {Amount, AccountNumber, Signable} from '../../common';\n\nexport class InsurancesContractsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Insurance>, CSCoreSDK.HasInstanceResource<InsurancesContractResource> {\n\n    /**\n     * Returns list of life insurances for current user.\n     */\n    list = (params?: InsurancesParameters): Promise<InsuranceList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'insurances', params, response => {\n\n            response.items.forEach(item => {\n                transformDates(item);\n                resourcifyInsurance(<Insurance>item, this.withId((<Insurance>item).id));\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Get the resource of insurance contracts with a given id\n     */\n    withId = (id: string): InsurancesContractResource => {\n        return new InsurancesContractResource(id, this.getPath(), this.getClient());\n    } \n}\n\nexport class InsurancesContractResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<InsuranceDetail>, CSCoreSDK.UpdateEnabled<UpdateInsuranceRequest, UpdateInsuranceResponse> {\n\n    /**\n     * Returns detail of the life insurance\n     */\n    get = (): Promise<InsuranceDetail> => {\n        \n        return this._client.callApi(`${this.getPath().replace('/my', '/cz/my')}/detail`, 'GET').then(response => {\n            transformDates(response);\n            resourcifyInsurance(<InsuranceDetail>response, this);\n\n            return response;\n        });\n    }\n\n    /**\n     * Allows to change a limited set of insurance settings of one specific contract. Currently only the field alias can be changed. Change only to alias field must not be signed, but response is ready also for signing process.\n     */\n    update = (payload: UpdateInsuranceRequest): Promise<UpdateInsuranceResponse> => {\n        (<any>payload).id = this._id;\n\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            transformDates(response);\n            resourcifyInsurance(<InsuranceDetail>response, this);\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n\n    /**\n     * Returns funds resource for insurance contract\n     */\n    get funds(): InsurancesContractFundsResource {\n        return new InsurancesContractFundsResource(`${this.getPath()}/funds`, this.getClient());\n    }\n\n    /**\n     * Returns beneficiaries resource for insurance contract\n     */\n    get beneficiaries(): InsurancesContractBeneficiariesResource {\n        return new InsurancesContractBeneficiariesResource(`${this.getPath()}/beneficiaries`, this.getClient());\n    }\n\n    /**\n     * Returns insurees resource for insurance contract\n     */\n    get insurees(): InsurancesContractInsureesResource {\n        return new InsurancesContractInsureesResource(`${this.getPath()}/insurees`, this.getClient());\n    }\n\n    /**\n     * Returns payments resource for insurance contract\n     */\n    get payments(): InsurancesContractPaymentsResource {\n        return new InsurancesContractPaymentsResource(`${this.getPath()}/payments`, this.getClient());\n    }\n\n    /**\n     * Returns services resource for insurance contract\n     */\n    get services(): InsurancesContractServicesResource {\n        return new InsurancesContractServicesResource(`${this.getPath()}/services`, this.getClient());\n    }\n\n    /**\n     * Returns events resource for insurance contract\n     */\n    get events(): InsurancesContractEventsResource {\n        return new InsurancesContractEventsResource(`${this.getPath()}/events`, this.getClient());\n    }\n\n    /**\n     * Returns taxBenefits resource for insurance contract\n     */\n    get taxBenefits(): InsurancesContractTaxBenefitsResource {\n        return new InsurancesContractTaxBenefitsResource(`${this.getPath()}/taxBenefits`, this.getClient());\n    }\n\n    /**\n     * Returns strategies resource for insurance contract\n     */\n    get strategies(): InsurancesContractStrategiesResource {\n        return new InsurancesContractStrategiesResource(`${this.getPath()}/strategies`, this.getClient());\n    }\n\n    /**\n     * Returns transfer resource for insurance contract\n     */\n    get transfer(): InsurancesContractTransferResource {\n        return new InsurancesContractTransferResource(`${this.getPath()}/transfer`, this.getClient());\n    }\n}\n\nfunction transformDates(item) {\n    if(item.life) {\n        CSCoreSDK.EntityUtils.addDatesFromISO(['contractEndDate', 'contractStartDate', 'contractTerminationDate', 'lastPremiumDate', 'premiumLastPaid'], item.life);\n    }\n}\n\nfunction resourcifyInsurance(insurance: Insurance, insuranceReference: InsurancesContractResource) {\n    insurance.get = insuranceReference.get;\n    insurance.update = insuranceReference.update;\n    insurance.funds = insuranceReference.funds;\n    insurance.beneficiaries = insuranceReference.beneficiaries;\n    insurance.insurees = insuranceReference.insurees;\n    insurance.payments = insuranceReference.payments;\n    insurance.services = insuranceReference.services;\n    insurance.events = insuranceReference.events;\n    insurance.taxBenefits = insuranceReference.taxBenefits;\n    insurance.strategies = insuranceReference.strategies;\n    insurance.transfer = insuranceReference.transfer;\n}\n\nexport interface InsuranceList extends CSCoreSDK.PaginatedListResponse<Insurance> {}\n\nexport interface Insurance extends UpdateInsuranceRequest {\n\n    /**\n     * Contract number.\n     */\n    id: string;\n\n    /**\n     * Product Type of insurance. ENUM values: LIFE (CSAS supports only this value)\n     */\n    type: string;\n\n    /**\n     * Code of the sVersicherung product.\n     */\n    product: string;\n\n    /**\n     * Name of the sVersicherung product (localised).\n     */\n    productI18N: string;\n\n    /**\n     * The primary holder of the specific insurance contract.\n     */\n    insurancePolicyHolder: string;\n\n    /**\n     * Policy number\n     */\n    policyNumber: string;\n\n    /**\n     * ENUM: ACTIVE, CLOSED\n     */\n    status: string;\n\n    life?: LifeDetail;\n\n    /**\n     * Convenience get method for fetching Insurance detail\n     */\n    get: () => Promise<InsuranceDetail>;\n\n    /**\n     * Convenience update method for updating insurance\n     */\n    update: (payload: UpdateInsuranceRequest) => Promise<UpdateInsuranceResponse>;\n\n    /**\n     * Convenience getter for Insurance funds\n     */\n    funds: InsurancesContractFundsResource;\n\n    /**\n     * Convenience getter for Insurance beneficiaries\n     */\n    beneficiaries: InsurancesContractBeneficiariesResource;\n\n    /**\n     * Convenience getter for Insurance insurees\n     */\n    insurees: InsurancesContractInsureesResource;\n\n    /**\n     * Convenience getter for Insurance payments\n     */\n    payments: InsurancesContractPaymentsResource;\n\n    /**\n     * Convenience getter for Insurance services\n     */\n    services: InsurancesContractServicesResource;\n\n    /**\n     * Convenience getter for Insurance events\n     */\n    events: InsurancesContractEventsResource;\n\n    /**\n     * Convenience getter for Insurance tax benefits\n     */\n    taxBenefits: InsurancesContractTaxBenefitsResource;\n\n    /**\n     * Convenience getter for Insurance strategies\n     */\n    strategies: InsurancesContractStrategiesResource;\n\n    /**\n     * Convenience getter for Insurance transfer\n     */\n    transfer: InsurancesContractTransferResource;\n\n}\n\nexport interface UpdateInsuranceRequest {\n\n    /**\n     * User-specific alias of the contract. Max. 50 characters.\n     */\n    alias?: string;\n}\n\nexport interface UpdateInsuranceResponse extends Insurance, CSCoreSDK.Signable {}\n\nexport interface InsuranceDetail extends Insurance {\n\n    /**\n     * Additional description of insurance product, additional charges, index applied to insurance contract\n     */\n    description?: string;\n\n\n    life?: LifeDetail;\n}\n\nexport interface InsurancesParameters extends CSCoreSDK.Paginated {}\n\nexport interface Life {\n\n\n    lastPremiumDate?: Date;\n\n    lastPremiumPaid?: Amount;\n    /**\n     * Payment Interval. ENUM: ONCE, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, UNKNOWN\n     */\n    premiumPaymentInterval: string;\n\n    /**\n     * The agreed premium for the specific insurance.\n     */\n    premium: Amount;\n\n    /**\n     * The agreed end dates of the insurance contract.\n     */\n    contractEndDate?: Date;\n\n    /**\n     * The contract start date.\n     */\n    contractStartDate: Date;\n\n    /**\n     * The agreed amount insured or risk covered by the insurance.\n     */\n    insuredAmount: Amount;\n\n    /**\n     * Capital value of the insurance. Amount of money in saving part of the insurance.\n     */\n    currentCapitalValue?: Amount;\n\n    /**\n     * Date of possible contract termination\n     */\n    contractTerminationDate?: Date;\n\n    /**\n     * Array of flags for life insurance extended detail\n     */\n    flags?: [string];\n}\n\nexport interface LifeDetail extends Life {\n\n    \n\n    /**\n     * Reason of possible contract termination\n     */\n    contractTerminationReason?: string;\n\n    /**\n     * In case of CLOSED contract, this means the reason of the termination. This field si localized.\n     */\n    \"cz-contractEndReason\"?: string;\n\n    /**\n     * Technique for the premium payment\n     */\n    premiumPaymentMethodI18N?: string;\n\n    /**\n     * Date of the last premium payment\n     */\n    premiumLastPaid?: Date;\n\n    \n\n    /**\n     * Technical interest rate. Value in percentage, e.g. 0,5 will be displayed as 0,5 %.\n     */\n    technicalInterestRate?: number;\n\n    employerBenefit?: {\n\n        /**\n         * frequency of the contribution. ENUM: ONCE, MONTHLY, QUARTERLY, HALFYEARLY, YEARLY, UNKNOWN\n         */\n        frequency?: string;\n\n        /**\n         * Explanatory text to employer contribution. Possible values: WHOLE_PREMIUM, PARTLY_PAID_PREMIUM, EXTRAORDINARY_PAYMENTS?\n         */\n        type?: string;\n\n        /**\n         * Amount of the contribution\n         */\n        amount?: Amount;\n    }\n\n    immobilization?: {\n\n        /**\n         * Immobilization secures the loan agreement with this contract number\n         */\n        contractNumber: string;\n\n        /**\n         * immobilization partner - third party name\n         */\n        partner: string;\n    }\n\n    paymentTemplates?: [{\n\n        /**\n         * Type of payment template. Possible values - ORDINARY, EXTRAORDINARY\n         */\n        type?: string;\n\n        symbols?: {\n\n            /**\n             * Variable symbol\n             */\n            variableSymbol?: string;\n        }\n\n        /**\n         * Receiver account number\n         */\n        receiver?: AccountNumber; \n    }];\n\n    /**\n     * Maximum amount that can be withdrawn from capital value\n     */\n    \"cz-capitalValueMaxWithdrawal\"?: Amount;\n\n    \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/insurances.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../../common';\n\nexport class InsurancesContractFundsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Fund>, CSCoreSDK.UpdateEnabled<UpdateFundRequest, UpdateFundResponse> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns detail of distribution of capital value into funds.\n     */\n    list = (): Promise<FundList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'funds', null);\n    }\n\n    /**\n     * Change the distribution of capital value into funds.\n     */\n    update = (payload: UpdateFundRequest): Promise<UpdateFundResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            \n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nexport interface FundList extends CSCoreSDK.ListResponse<Fund> {\n\n    /**\n     * Total invested amount into all funds in CZK.\n     */\n    totalInvestedAmount: Amount;\n\n    /**\n     * Shows, whether a investment program is active for life insurance product. The field can be either blank or filled with 2 values - INVESTMENT_MANAGEMENT or CONSEQ\n     */\n    investmentProgram?: string;\n\n    /**\n     * Array of flags for funds.\n     */\n    flags?: [string];\n}\n\nexport interface Fund {\n\n    /**\n     * Unique code of fund.\n     */\n    code: string;\n\n    /**\n     * Name of fund.\n     */\n    name: string;\n\n    /**\n     * Current value invested into fund in CZK\n     */\n    investedAmount: Amount;\n\n    /**\n     * Current value invested into fund in %.\n     */\n    investedShare: number;\n\n    /**\n     * The rate at which the savings component of the premium will be invested in selected funds.Value in percentage, e.g. 63 will be displayed as 63 %.\n     */\n    allocation: number;\n}\n\nexport interface UpdateFundRequest {\n\n    funds: [{\n\n        /**\n         * Unique code of fund.\n         */\n        code: string;\n\n        allocation: number;\n    }];\n\n    /**\n     * Shows, whether an investment program is active for life insurance product. The field can be either blank or filled with 2 values - INVESTMENT_MANAGEMENT or CONSEQ\n     */\n    investmentProgram?: string;\n}\n\nexport interface UpdateFundResponse extends UpdateFundRequest, CSCoreSDK.Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/funds.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\nexport class InsurancesContractBeneficiariesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<InsuranceBeneficiary>, CSCoreSDK.UpdateEnabled<UpdateInsuranceBeneficiaries, UpdateInsuranceBeneficiaries> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of beneficiaries related to the insurance contract.\n     */\n    list = (): Promise<InsuranceBeneficiaryList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'beneficiaries', null).then(response => {\n            CSCoreSDK.EntityUtils.addDatesToItems(['birthdate'], response);\n\n            return response;\n        });\n    }\n\n    /**\n     * Change beneficiaries and distribution of insurance among beneficiaries.\n     */\n    update = (payload: UpdateInsuranceBeneficiaries): Promise<UpdateInsuranceBeneficiaries> => {\n\n        if(payload && Array.isArray(payload.beneficiaries)) {\n            payload.beneficiaries.forEach(x => {\n                CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['birthdate'], x);\n            });\n        }\n\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n            CSCoreSDK.EntityUtils.addDatesToItems(['birthdate'], response, 'beneficiaries');\n\n            return response;\n        });\n    }\n}\n\n\n\nexport interface InsuranceBeneficiaryList extends CSCoreSDK.ListResponse<InsuranceBeneficiary> {}\n\nexport interface InsuranceBeneficiary {\n\n    /**\n     * Type of beneficiary\n     */\n    type: string;\n\n    /**\n     * Name of the beneficiary.\n     */\n    name?: string;\n\n    /**\n     * Birthdate of the beneficiary.\n     */\n    birthdate?: Date;\n\n    /**\n     * Percentage of the insurance contract determined to beneficiary or distributed by law. Value in percentage, e.g. 63 will be displayed as 63 %.\n     */\n    percentage?: number;\n\n    /**\n     * Attribute returns unstructured information about distribution among beneficiaries in a single string in 2 cases: 1) Distribution have never been changed (after modifying the distribution - information will be returned ina structured form); 2) BE did not cut up unstructured format.\n     */\n    unstructuredInfo?: string;\n\n    /**\n     * List of flags.\n     */\n    flags?: [string];\n}\n\nexport interface UpdateInsuranceBeneficiaries {\n\n    beneficiaries: [InsuranceBeneficiary]; \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/beneficiaries.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Address, Amount} from '../../common';\n\nexport class InsurancesContractInsureesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Insuree> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of insurees related to the insurance contract.\n     */\n    list = (): Promise<InsureeList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'insurees');\n    }\n}\n\nexport interface InsureeList extends CSCoreSDK.ListResponse<Insuree> {}\n\nexport interface Insuree {\n\n    /**\n     * Unique ID of the person related to the insurance contract. ID is hashed combination of contract number and birthnumber of the person: contractNumber_birthnumber.\n     */\n    id: string;\n\n    /**\n     * Type of person related to the insurance contract. 3 possible values: POLICYHOLDER, INSURED_PERSON, CHILD.\n     */\n    type: string;\n\n    /**\n     * Name of the person related to the insurance contract.\n     */\n    name: string;\n\n    /**\n     * Contact address.\n     */\n    addresses: [Address];\n\n    /**\n     * Birthnumber of the person related to the insurance contract.\n     */\n    birthNumber: string;\n\n    /**\n     * Phone number of the person related to the insurance contract.\n     */\n    phoneNumber?: string;\n\n    /**\n     * Email address of the person related to the insurance contract.\n     */\n    email?: string;\n    \n    risks?: [{\n\n        /**\n         * Name of the active risk product.\n         */\n        productName?: string;\n\n        /**\n         * Group of the active risk product.\n         */\n        riskGroup?: string;\n\n        /**\n         * Amount that an ​insurance ​company will ​pay after making a ​claim.\n         */\n        insuredSum?: Amount;\n\n        /**\n         * Frequency in which insured sum may be paid.\n         */\n        frequency?: string;\n\n        /**\n         * Description of the insured risk.\n         */\n        explanation?: string;\n    }];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/insurees.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport{Amount} from '../../common';\n\nexport class InsurancesContractPaymentsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<ContractPayment> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of life insurance payments. List contains one upcoming payment and payments history for 2 years.\n     */\n    list = (): Promise<ContractPaymentList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'payments').then(response => {\n            CSCoreSDK.EntityUtils.addDatesToItems(['transactionDate', 'instructionFrom', 'instructionTo'], response);\n\n            return response;\n        });\n    }\n}\n\n/**\n * List of contract payments\n */\nexport interface ContractPaymentList extends CSCoreSDK.ListResponse<ContractPayment> {}\n\nexport interface ContractPayment {\n\n    /**\n     * Payment identifier. Unique for current insurance.\n     */\n    id: string;\n\n    /**\n     * Type of the payment. Possible values are ORDINARY, ONETIME, EXTRAORDINARY, FUTURE, OVERDUE, WITHDRAWAL, PARTIALLY_PAID, UNKNOWN.\n     */\n    type: string;\n\n    /**\n     * Payment date.\n     */\n    transactionDate?: Date;\n\n    /**\n     * Payment amount. Amount which was received by insurance company.\n     */\n    amount: Amount;\n\n    /**\n     * Rest which should be paid if payment instruction wasn't fully paid by this payment.\n     */\n    restToPay?: Amount;\n\n    /**\n     * Payment instruction amount. Amount which should be paid for particular period.\n     */\n    instruction?: Amount;\n\n    /**\n     * Amount paid by employer (as benefit). It is included in the payment amount.\n     */\n    employerContribution?: Amount;\n\n    /**\n     * Start date of the period for which payment instruction was created.\n     */\n    instructionFrom?: Date;\n\n    /**\n     * End date of the period for which payment instruction was created.\n     */\n    instructionTo?: Date;\n\n    /**\n     * Array of flags for funds.\n     */\n    flags?: [string];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/payments.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, Signable} from '../../common';\n\nexport class InsurancesContractServicesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<InsuranceService> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of services for the life insurance\n     */\n    list = (): Promise<InsuranceServiceList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'services').then(response => {\n\n            response.items.forEach(x => {\n                transformDates(x);\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Allows activation of risk sports insurance.\n     */\n    activateRiskSports = (payload: RiskSportsUpdateRequest): Promise<ActivateRiskSportsResponse> => {\n\n        CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['dateFrom', 'dateTo'], payload);\n\n        return CSCoreSDK.ResourceUtils.CallUpdateWithSuffix(this, 'riskSportsActivation', payload).then(response => {\n\n            transformDates(response);\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n\n    /**\n     * Allows deactivation of risk sports insurance.\n     */\n    deactivateRiskSports = (payload: RiskSportsUpdateRequest): Promise<DeactivateRiskSportsResponse> => {\n        \n        CSCoreSDK.EntityUtils.transformDatesToSimpleISO(['dateFrom', 'dateTo'], payload);\n\n        return CSCoreSDK.ResourceUtils.CallUpdateWithSuffix(this, 'riskSportsDeactivation', payload).then(response => {\n\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nfunction transformDates(response) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['dateFrom', 'dateTo'], response);\n}\n\nexport interface InsuranceServiceList extends CSCoreSDK.ListResponse<InsuranceService> {}\n\nexport interface InsuranceService {\n\n    /**\n     * indicator for FE for grouping services to boxes. Possible values: RISK_SPORTS, SERVICE\n     */\n    group: string;\n\n    /**\n     * service id\n     */\n    id: string;\n\n    /**\n     * service icon group\n     */\n    iconGroup: string;\n\n    /**\n     * service name\n     */\n    nameI18N: string;\n\n    /**\n     * Description of the service.\n     */\n    descriptionI18N: string;\n\n    /**\n     * relevant only for RISK_SPORTS group. For those number of days this service can be activated this year at all.\n     */\n    availableDays: string;\n\n    /**\n     * Starting date of active service. Relevant for RISK_SPORTS.\n     */\n    activeFrom: Date;\n\n    /**\n     * Ending date of active service. Relevant for RISK_SPORTS.\n     */\n    activeTo: Date;\n\n    /**\n     * Amount of bonus. Relevant for NO_CLAIM_BONUS, LOYALTY_BONUS.\n     */\n    bonusAmount: Amount;\n\n    /**\n     * Indicates service state. Three possible values: ACTIVATED - insurance was already activated but will be active in the future. ACTIVE - insurance is active right now. INACTIVE - insurance is neither activated nor active.\n     */\n    state: string;\n}\n\nexport interface RiskSportsUpdateRequest {\n\n    dateFrom: Date;\n\n    dateTo: Date;\n\n    phoneNumber: string;\n}\n\nexport interface ActivateRiskSportsResponse extends RiskSportsUpdateRequest, CSCoreSDK.Signable {\n\n    policyNumber: string;\n}\n\nexport interface DeactivateRiskSportsResponse extends CSCoreSDK.Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/services.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../../common';\n\nexport class InsurancesContractEventsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<ContractEvent> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of events for the life insurance\n     */\n    list = (): Promise<ContractEventList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'events').then(response => {\n            response.items.forEach(item => {\n                CSCoreSDK.EntityUtils.addDatesFromISO(['substateDate', 'processingDate', 'creationDate'], item);\n                \n                if((<ContractEvent>item).indemnities && Array.isArray((<ContractEvent>item).indemnities)) {\n                    (<ContractEvent>item).indemnities.forEach(indemnity => {\n                        CSCoreSDK.EntityUtils.addDatesFromISO('paymentDate', indemnity);\n                    });\n                }\n            });\n\n            return response;\n        });\n    }\n}\n\nexport interface ContractEventList extends CSCoreSDK.ListResponse<ContractEvent> {}\n\nexport interface ContractEvent {\n\n    /**\n     * Insurance event number\n     */\n    number: string;\n\n    /**\n     * Creation date of the insurance event.\n     */\n    creationDate: Date;\n\n    /**\n     * State of the event. Possible values: REPORTED, ATTACHING_DOCS, IN_SOLUTION, CLOSED\n     */\n    state: string;\n\n    /**\n     * Substate of the event.\n     */\n    substate?: string;\n\n    /**\n     * Date that relates to the insurance substate.\n     */\n    substateDate?: Date;\n\n    /**\n     * Substate information with text and date.\n     */\n    substateInfo?: string;\n\n    /**\n     * Total amount for the insurance event\n     */\n    amount: Amount;\n\n    /**\n     * The date when thi event has been reported\n     */\n    processingDate?: Date;\n\n    /**\n     * List of indemnities related to the insurance event.\n     */\n    indemnities?: [{\n\n        /**\n         * Date of the payment was paid out.\n         */\n        paymentDate: Date;\n\n        /**\n         * Method of the transfer.\n         */\n        transferMethod: string;\n\n        /**\n         * Receiver name.\n         */\n        receiverName: string;\n\n        /**\n         * Paid indemnity value.\n         */\n        amount: Amount;\n    }];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/events.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, AccountNumber} from '../../common';\n\nexport class InsurancesContractTaxBenefitsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<TaxBenefit> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns tax benefits for the life insurance \n     */\n    get = (): Promise<TaxBenefit> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null);\n    }\n}\n\nexport interface TaxBenefit {\n\n    /**\n     * Tax deductable premium.\n     */\n    taxDeductiblePremium?: Amount;\n\n    /**\n     * Recommended extraordinary deposit for maximum tax deduction.\n     */\n    recommendedDeposit?: Amount;\n\n    /**\n     * Explanatory text for recommended extraordinary deposit. Available only in CZ language.\n     */\n    recommendedDepositText?: string;\n\n    /**\n     * Contains data that should be prefilled to domestic payment form.\n     */\n    paymentTemplate?: {\n\n        /**\n         * The date when thi event has been reported\n         */\n        symbols?: {\n\n            /**\n             * Variable symbol for the payment template.\n             */\n            variableSymbol?: string;\n        }\n\n        /**\n         * Receiver's account number of the payment.\n         */\n        receiver?: AccountNumber;\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/tax-benefits.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\nexport class InsurancesContractStrategiesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<any> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of strategies with corresponsing funds allocation for the life insurance\n     */\n    list = (): Promise<any> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'strategies');\n    }\n}\n\nexport interface ContractStrategyList extends CSCoreSDK.ListResponse<ContractStrategy> {}\n\nexport interface ContractStrategy {\n\n    /**\n     * Type of the chosen strategy. Possible values: CONSERVATIVE, PROGRESSIVE, BALANCED, CONTROL, ACTUAL_SETTING\n     */\n    type: string;\n\n    /**\n     * Possible values are STRATEGY, INVESTMENT_MANAGEMENT. That means the funds allocation is fixed given by the chosen strategy, or it is under an investment program, so it is variable depending on current market state.\n     */\n    group: string;\n\n    funds: [{\n\n        /**\n         * Id of the fund\n         */\n        code: string;\n\n        /**\n         * Name of the fund.\n         */\n        name: string;\n\n        /**\n         * Share in the fund. This is percentage value. 20 means 20%.\n         */\n        share: number;\n\n        changeType?: string;\n    }];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/strategies.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount, AccountNumber} from '../../common';\n\nexport class InsurancesContractTransferResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.UpdateEnabled<UpdateContractTrasferRequest, UpdateContractTrasferResponse> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Creates insurance transfer - premium payment, extra deposit or recommended deposit.\n     */\n    update = (payload: UpdateContractTrasferRequest): Promise<UpdateContractTrasferResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), this.getPath());\n\n            return response;\n        });\n    }\n}\n\nexport interface UpdateContractTrasferRequest {\n\n    /**\n     * Type of the transfer. Possible values are PAY_PREMIUM, EXTRA_DEPOSIT, RECOMMENDED_DEPOSIT.\n     */\n    type: string;\n\n    /**\n     * Amount which should be transfered.\n     */\n    amount: Amount;\n\n    /**\n     * Sender account.\n     */\n    sender: AccountNumber;\n}\n\nexport interface UpdateContractTrasferResponse extends CSCoreSDK.Signable {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/insurances/transfer.ts\n **/","/// <reference path=\"../../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\nexport class LoyaltyContractsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<Loyalty> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Get data about iBod account of the current client.\n     */\n    get = (): Promise<Loyalty> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            CSCoreSDK.EntityUtils.addDatesFromISO('exportDate', response);\n\n            return response;\n        });\n    }\n}\n\nexport interface Loyalty {\n\n    /**\n     * State of the ibod account. Possible values are REGISTERED, UNREGISTERED, DEACTIVATED_FROM_FSCS.\n     */\n    state: string;\n\n    /**\n     * Date when data were actual.\n     */\n    exportDate: Date;\n\n    /**\n     * IBod points count.\n     */\n    pointsCount: number;\n\n    /**\n     * Activation ibod code.\n     */\n    activationCode?: string; \n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/contracts/loyalty/loyalty.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {ServiceList, Service, ServiceParameters} from '../accounts/services'; \n\nexport class ServicesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Service> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns possibly empty list of services for current user. This resource represents only services which are not bound to any product.\n     */\n    list = (params?: ServiceParameters): Promise<ServiceList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'services', params, response => {\n            CSCoreSDK.EntityUtils.addDatesToItems(['dateFrom', 'dateTo'], response);\n\n            return response;\n        });\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/services/services.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {MessagesMandatoryResource} from './mandatory';\nimport {MessageAttachmentsResource} from './attachments';\nimport {NetbankingEmptyResponse} from '../common';\n\nexport class MessagesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Message>, CSCoreSDK.HasInstanceResource<MessageResource> {\n\n    /**\n     * Get all messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application).\n     */\n    list = (params?: MessagesParameters): Promise<MessageList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'messages', params, response => {\n\n            response.items.forEach(item => {\n                transformDates(item);\n                resourcifyMessages(<Message>item, this.withId((<Message>item).id));\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Get the resource of message with a given id \n     */\n    withId = (id: string): MessageResource => {\n        return new MessageResource(id, this.getPath(), this.getClient());\n    }\n\n    /**\n     * Get messages mandatory resource\n     */\n    get mandatory(): MessagesMandatoryResource {\n        return new MessagesMandatoryResource(`${this.getPath()}/mandatory`, this.getClient());\n    }\n}\n\nexport class MessageResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Message>, CSCoreSDK.UpdateEnabled<UpdateMessageRequest, NetbankingEmptyResponse>, CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {\n\n    /**\n     * Get one specific messages for current user generated by bank itself. Message can be read or unread, mandatory and non-mandatory.\n     */\n    get = (): Promise<Message> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            transformDates(response);\n            resourcifyMessages(<Message>response, this);        \n\n            return response;\n        });\n    }\n\n    /**\n     * After message has been read by user it should be marked accordingly by this endpoint.\n     */\n    update = (payload: UpdateMessageRequest): Promise<NetbankingEmptyResponse> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n\n    /**\n     * Resource for deleting message by its identifier. Only read messages can be deleted.\n     */\n    delete = (): Promise<NetbankingEmptyResponse> => {\n        return CSCoreSDK.ResourceUtils.CallDelete(this, null);\n    }\n\n    /**\n     * Get messages attachments resource\n     */\n    get attachments(): MessageAttachmentsResource {\n        return new MessageAttachmentsResource(`${this.getPath()}/attachments`, this.getClient());\n    }\n}\n\nfunction transformDates(item) {\n    CSCoreSDK.EntityUtils.addDatesFromISO(['date'], item);\n}\n\nfunction resourcifyMessages(message: Message, messageReference: MessageResource) {\n    message.get = messageReference.get;\n    message.update = messageReference.update;\n    message.delete = messageReference.delete;\n    // Convenience download\n}\n\nexport interface MessageList extends CSCoreSDK.PaginatedListResponse<Message> {}\n\nexport interface Message {\n\n    /**\n     * Message identifier.\n     */\n    id: string;\n\n    /**\n     * Name of the message sender. For example source system of the message.\n     */\n    from: string;\n\n    /**\n     * Message subject.\n     */\n    subject: string;\n    \n    /**\n     * Date when message was sent/generated.\n     */\n    date: Date;\n\n    /**\n     * Body of the message. Body is html code. It is up to FE application to properly display it.\n     */\n    body: string;\n\n    /**\n     * Array of message attachments.\n     */\n    attachments: [{\n\n        /**\n         * Attachment identifier.\n         */\n        id: string;\n\n        /**\n         * File name of the attachment.\n         */\n        fileName: string;\n    }];\n\n    /**\n     * Array of flags for messages.\n     */\n    flags?: [string];\n\n    /**\n     * Convenience get method for fetching message detail\n     */\n    get: () => Promise<Message>;\n\n    /**\n     * Convenience update method for updating message\n     */\n    update: (payload: UpdateMessageRequest) => Promise<NetbankingEmptyResponse>;\n\n    /**\n     * Convenience delete method for deleting message\n     */\n    delete: () => Promise<NetbankingEmptyResponse>;\n}\n\nexport interface MessagesParameters extends CSCoreSDK.Paginated, CSCoreSDK.Sortable {}\n\nexport interface UpdateMessageRequest {\n    read: boolean;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/messages/messages.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Message} from './messages';\n\nexport class MessagesMandatoryResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Message> {\n\n    /**\n     * Returns all mandatory messages. This call might return different messages based on appId of the caller (for example, some messages might be specific to an application). Which messages can be seen by which application can be configured on the presto server side.\n     */\n    list = (): Promise<MandatoryMessageList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'messages').then(response => {\n            CSCoreSDK.EntityUtils.addDatesToItems(['date'], response);\n\n            return response;\n        });\n    }\n}\n\nexport interface MandatoryMessageList extends CSCoreSDK.ListResponse<Message> {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/messages/mandatory.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\nexport class MessageAttachmentsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<MessageAttachmentResource> {\n\n    /**\n     * Get the resource of attachments \n     */\n    withId = (id: string): MessageAttachmentResource => {\n        return new MessageAttachmentResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class MessageAttachmentResource extends CSCoreSDK.InstanceResource {\n\n    /**\n     * Downloads attachment file. The binary representation of an attachment file, with a “Content-Disposition” header of type attachment (including the filename), in order to instruct the browser to open a save dialog.\n     */\n    download = (): Promise<any> => {\n        return CSCoreSDK.ResourceUtils.CallDownload(this, null, 'POST');\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/messages/attachments.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {AccountNumber} from '../common';\n\nexport class TemplatesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Template>, CSCoreSDK.HasInstanceResource<TemplateResource> {\n\n    /**\n     * List of payment templates for current user.\n     */\n    list = (params?: TemplatesParameters): Promise<TemplateList> => {\n        return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'templates', params, response => {\n            \n            response.items.forEach(item => {\n                resourcifyTemplates(<Template>item, this.withId((<Template>item).id));\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Get resource for template with a given id \n     */\n    withId = (id: string): TemplateResource => {\n        return new TemplateResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class TemplateResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Template> {\n\n    /**\n     * Get payment template detail\n     */\n    get = (): Promise<Template> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n            resourcifyTemplates(<Template>response, this);\n\n            return response;\n        });\n    }\n}\n\nfunction resourcifyTemplates(template: Template, templateReference: TemplateResource) {\n    template.get = templateReference.get;\n}\n\nexport interface TemplateList extends CSCoreSDK.PaginatedListResponse<Template> {}\n\nexport interface Template {\n\n    /**\n     * template ID\n     */\n    id: string;\n\n    /**\n     * name defined by user\n     */\n    name?: string;\n\n    /**\n     * Order category. Possible values: DOMESTIC, INTERNATIONAL\n     */\n    orderCategory?: string;\n\n    /**\n     * Receiver account number.\n     */\n    receiver: AccountNumber;\n\n    /**\n     * Convenience method for fetching templates detail\n     */\n    get: () => Promise<Template>;\n}\n\nexport interface TemplatesParameters extends CSCoreSDK.Paginated {}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/templates/templates.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {NetbankingEmptyResponse} from '../common';\n\nexport class PhoneNumbersResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<PhoneNumber>, CSCoreSDK.CreateEnabled<PhoneNumberRequest, PhoneNumber>, CSCoreSDK.HasInstanceResource<PhoneNumberResource> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of phone numbers\n     */\n    list = (): Promise<PhoneNumberList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'phoneNumbers').then(response => {\n\n            response.items.forEach(x => {\n                resourcifyPhoneNumbers(<PhoneNumber>x, this.withId((<PhoneNumber>x).id));\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Creates new phone number\n     */\n    create = (payload: PhoneNumberRequest): Promise<PhoneNumber> => {\n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n            resourcifyPhoneNumbers(<PhoneNumber>response, this.withId((<PhoneNumber>response).id));\n\n            return response;\n        });\n    }\n\n    /**\n     * Get single phone number with a given id\n     */\n    withId = (id: string): PhoneNumberResource => {\n        return new PhoneNumberResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class PhoneNumberResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.UpdateEnabled<PhoneNumberRequest, PhoneNumber>, CSCoreSDK.DeleteEnabled<any> {\n\n    /**\n     * Updates phone number\n     */\n    update = (payload: PhoneNumberRequest): Promise<PhoneNumber> => {\n        (<any>payload).id = this._id;\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n            resourcifyPhoneNumbers(<PhoneNumber>response, this);\n\n            return response;\n        });\n    }\n\n    /**\n     * Deletes phone number\n     */\n    delete = (): Promise<NetbankingEmptyResponse> => {\n        return CSCoreSDK.ResourceUtils.CallDelete(this, null);\n    }\n}\n\nexport interface PhoneNumberList extends CSCoreSDK.ListResponse<PhoneNumber> {}\n\nexport interface PhoneNumber extends PhoneNumberRequest {\n\n    /**\n     * Phone book entry identifier.\n     */\n    id: string;\n\n    /**\n     * Convenience method for updating Phone number\n     */\n    update: (payload: PhoneNumberRequest) => Promise<PhoneNumber>;\n\n    /**\n     * Convenience method for deleting Phone number\n     */\n    delete: () => Promise<NetbankingEmptyResponse>;\n}\n\nexport interface PhoneNumberRequest {\n\n    /**\n     * Alias name of phone number entered by user for his better orientation in phone book.\n     */\n    alias?: string;\n\n    /**\n     * Phone number which will be saved in phone book. The value in the phone number field must be a 9-digit number that cannot have a leading zero.\n     */\n    phoneNumber: string;\n\n    /**\n     * Array of optional Flag values.\n     */\n    flags?: [string];\n}\n\nfunction resourcifyPhoneNumbers(phoneNumber: PhoneNumber, phoneNumberReference: PhoneNumberResource) {\n    phoneNumber.update = phoneNumberReference.update;\n    phoneNumber.delete = phoneNumberReference.delete;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/phone-numbers/phone-numbers.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\nexport class BudgetsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Budget> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {\n        super(basePath, client);\n        \n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of user's tracked categories and its limits.\n     */\n    list = (): Promise<BudgetList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'budgets');\n    }\n\n    /**\n     * Set new value of tracked categories.\n     */\n    update = (payload: UpdateBudgets): Promise<UpdateBudgets> => {\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload);\n    }\n}\n\nexport interface BudgetList extends CSCoreSDK.ListResponse<Budget> {}\n\nexport interface Budget {\n\n    category: {\n\n        /**\n         * Unique id of watched main category of client transactions. Possible values are NON_REGULAR_INCOME, UNCATEGORIZED_INCOME, TRAVEL_HOLIDAYS, HEALTH, LEISURE, COMMUNICATION, CAR, FOOD, EDUCATION, \n         * REGULAR_INCOME, ONLINE_SHOPPING, OTHER_EXPENSES, CLOTHING, UNCATEGORIZED_EXPENSE, FEES, SAVINGS_INVESTMENT, TRANSPORT, ALIMONY_POCKET_MONEY, TAXES, WITHDRAWAL, LIVING_AND_ENERGY.\n         */\n        id: string;\n\n        /**\n         * Category level. Currently only \"mainCategory\" is supported.\n         */\n        level: string;\n    }\n\n    /**\n     * financial limit of the watched category per a given period.\n     */\n    budget?: Amount;\n}\n\nexport interface UpdateBudgets {\n    budgets: [Budget];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/budgets/budgets.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\nexport class GoalsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Goal>, CSCoreSDK.UpdateEnabled<UpdateGoal, UpdateGoal> {\n\n    constructor(basePath: string, client: CSCoreSDK.WebApiClient) {    \n        super(basePath, client);\n        \n        // insert 'cz' resource into the resource's path because the api requires it in some resources\n        this._path = this.getPath().replace('/my', '/cz/my');\n    }\n\n    /**\n     * Returns list of user's saving goals except of completed ones. In price, only CZK currency is supported. If user has never set any goal, the response is empty.\n     */\n    list = (): Promise<GoalList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'goals').then(response => {\n\n            response.items.forEach(item => {\n                transformDates(item);\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Set new value of goals. In price, only CZK currency is supported. If completed flag is not present, false value is supposed. All goals of given client are replaced - old ones (except of completed) are deleted and these new specified are inserted.\n     */\n    update = (payload: UpdateGoal): Promise<UpdateGoal> => {\n        if(Array.isArray(payload.goals)) {\n            payload.goals.forEach(goal => {\n                if(goal.deadline && Object.prototype.toString.call(goal.deadline) === '[object Date]') {\n                    (<any>goal).deadline = goal.deadline.getTime();\n                }\n            });\n        }\n        return CSCoreSDK.ResourceUtils.CallUpdate(this, payload).then(response => {\n\n            (<any>response).goals.forEach(item => {\n                transformDates(item);\n            });\n\n            return response;\n        });\n    }\n}\n\nfunction transformDates(item) {\n    if((<Goal>item).deadline) {\n        (<Goal>item).deadline = new Date((<any>item).deadline);\n    }\n}\n\nexport interface GoalList extends CSCoreSDK.ListResponse<Goal> {}\n\nexport interface Goal {\n\n    /**\n     * Saving goal name. Must be non-empty and unique among goals of one client.\n     */\n    name: string;\n\n    /**\n     * Price of the saving goal.\n     */\n    price: Amount;\n\n    /**\n     * Maximal date (deadline) of the saving goal completion.\n     */\n    deadline: Date;\n\n    /**\n     * Flag of the completed goal.\n     */\n    completed: boolean;\n}\n\nexport interface UpdateGoal {\n    goals: [Goal]\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/goals/goals.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\n\nexport class PromotionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Promotion>, CSCoreSDK.CreateEnabled<CreatePromotionRequest, CreatePromotionResponse>  {\n\n    /**\n     * Returns promotion list for the current user \n     */\n    list = (): Promise<PromotionList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'promotions');\n    }\n\n    /**\n     * Hide specified promotion\n     */\n    create = (payload: CreatePromotionRequest): Promise<CreatePromotionResponse> => {\n        return this._client.callApi(this.getPath().replace('promotions', 'actions'), 'POST', null, payload);\n    }\n}\n\nexport interface PromotionList extends CSCoreSDK.ListResponse<Promotion> {}\n\nexport interface Promotion {\n\n    /**\n     * Id of campaign\n     */\n    promotionId: string;\n\n    displayType: {\n        \n        /**\n         * Title of the promotion.\n         */\n        titleText?: string;\n\n        /**\n         * Additional - subline text for the title.\n         */\n        sublineText?: string;\n\n        /**\n         * The type of the layout for the campaign. Currently only these values are possible: OVERVIEW_CARD\n         */\n        displayType: string;\n\n        /**\n         * Type of the campaign, possible values are PRODUCT_PROMOTION, PLUGIN_PROMOTION, INFOCARD, SHADOWCARD\n         */\n        cardDesign: string;\n\n        /**\n         * relative path of url for the background picture published in WCM.\n         */\n        backgroundImage?: string;\n\n        /**\n         * relative path of url for the main picture published in WCM.\n         */\n        mainImage?: string;\n\n        /**\n         * Number of the row in the Overview screen, where the promotion should by displayed. Relevant only for displayType OVERVIEW_CARD\n         */\n        position: number;\n\n        /**\n         * Number of the column in the Overview screen, where the promotion should by displayed. Relevant only for displayType OVERVIEW_CARD\n         */\n        column: string;\n\n        /**\n         * Labeling of the main button. Can also be empty, if empty we don’t show a button. Max characters: 30 preliminary value can perhaps change later.\n         */\n        btnText?: string;\n\n        /**\n         * Key, describing the look of the main button. Must be one of the following values: DEFAULT BORDER PRIMARY SUCCESS INFO WARNING DANGER LINK, GREY\n         */\n        btnDesign?: string;\n    }\n\n    /**\n     * Possible actions. Each action is represented by related button on the promotion card/message etc.\n     */\n    actions: [{\n        \n        /**\n         * Technical identifier of the action\n         */\n        actionID: string;\n\n        /**\n         * Type of the action button. Possible values are SHOPPRODUCT, SHOWURL, HIDE\n         */\n        actionType: string;\n\n        /**\n         * Name of the window where the url should be opened. This element is mandatory only in case of actionType = SHOWURL. Can be empty then same window\n         */\n        target?: string;\n\n        /**\n         * Contains the URL of an external site to be called. This element is only mandatory if actionType = SHOWURL\n         */\n        url?: string;\n\n        /**\n         * Code of the product/plugin connected to the sales promotion. Possible values are Possible values are: RUFO_ORDER, RUFO_INCREASE, UFO_ORDER, UFO_INCREASE.\n         */\n        productCode?: string;\n\n        /**\n         * Element connected to this action. Application specific attribute.\n         */\n        element: string;\n    }]\n}\n\nexport interface CreatePromotionRequest {\n\n    /**\n     * Id of campaign\n     */\n    promotionId: string;\n\n    executedAction: {\n\n        actionId: string;\n\n        actionType: string;\n    };\n}\n\nexport interface CreatePromotionResponse {\n\n    infoItems?: [{\n\n        infoName: string;\n\n        infoValue: string;\n    }];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/promotions/promotions.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {Amount} from '../common';\n\nexport class AuthorizationLimitsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ParametrizedListEnabled<AuthorizationLimitsParams, AuthorizationLimit>, CSCoreSDK.HasInstanceResource<AuthorizationLimitResource> {\n\n    /**\n     * Return all user local specific payment order entry limits for for all user active authorization methods and channels/applications used in country.\n     */\n    list = (params?: AuthorizationLimitsParams): Promise<AuthorizationLimitList> => {\n        return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, 'limits', params).then(response => {\n\n            response.items.forEach(x => {\n                resourcifyLimits(<AuthorizationLimit>x, this.withId((<AuthorizationLimit>x).id));\n            });\n\n            return response;\n        });\n    }\n\n    /**\n     * Get the resource of authorization limit with a given id\n     */\n    withId = (id: string): AuthorizationLimitResource => {\n        return new AuthorizationLimitResource(id, this.getPath(), this.getClient());\n    }\n}\n\nexport class AuthorizationLimitResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<AuthorizationLimit> {\n\n    /**\n     * Return local specific payment order entry limits valid for combination of user, authorization method and used channel/application. For example user could define different limits for TAC authorization via George and mobile applications.\n     */\n    get = (): Promise<AuthorizationLimit> => {\n        return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n            resourcifyLimits(<AuthorizationLimit>response, this);\n\n            return response;\n        });\n    }\n}\n\nfunction resourcifyLimits(limit: AuthorizationLimit, limitReference: AuthorizationLimitResource) {\n    limit.get = limitReference.get;\n}\n\nexport interface AuthorizationLimitList extends CSCoreSDK.ListResponse<AuthorizationLimit> {}\n\nexport interface AuthorizationLimit {\n\n    /**\n     * Internal ID for limit definition for authorization type, channel, application. If internal ID doesn't exist, ID could be generated using authorizationType, channelId and applicationId values.\n     */\n    id: string;\n\n    /**\n     * Authorization method type for which is limit defined. ENUM: tac, tan, sms, gridCard, eok, displayCard, mToken other local authorization type has to be defined.\n     */\n    authorizationType: string;\n\n    /**\n     * ID of the channel for which is limit defined. ENUM: netBanking, mobileBanking, homeBanking, thirdParty, and unknown - limit valid for all channels, not particulary defined.\n     */\n    channelId: string;\n\n    /**\n     * ID of the application for which is limit defined. ENUM: George, InternetBanking and unknown - limit valid for all applications, not particulary defined.\n     */\n    applicationId: string;\n\n    /**\n     * Daily limit for particular authorization method (_embedded AMOUNT type)\n     */\n    dailyLimit?: Amount;\n\n    /**\n     * Transaction limit for particular authorization method.\n     */\n    transactionLimit?: Amount;\n\n    /**\n     * Maximal daily limit for authorization method defined by bank.\n     */\n    maxBankLimit?: Amount;\n\n    /**\n     * Convenience method for fetching authorization limit detail.\n     */\n    get: () => Promise<AuthorizationLimit>;\n}\n\nexport interface AuthorizationLimitsParams {\n\n    /**\n     * Channel for which limits are requested. Example: George \n     */\n    channel?: string;\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/authorization-limits/authorization-limits.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {NetbankingEmptyResponse} from '../common';\n\nexport class AuthorizationTokenResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.DeleteEnabled<NetbankingEmptyResponse> {\n\n    /**\n     * Invalidate authorization token.\n     */\n    delete = (): Promise<NetbankingEmptyResponse> => {\n        return this._client.callApi(this.getPath().replace('/my', ''), 'DELETE');\n    }\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/authorization-token/authorization-token.ts\n **/","/// <reference path=\"../../node_modules/cs-core-sdk/dist/cs-core-sdk.node.d.ts\" />\nimport CSCoreSDK = require('cs-core-sdk');\nimport {SignInfo} from '../common';\n\nexport class BundlesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.CreateEnabled<BundleCreateRequest, BundleResponse> {\n    \n    create = (payload: BundleCreateRequest): Promise<BundleResponse> => {\n        return CSCoreSDK.ResourceUtils.CallCreate(this, payload).then(response => {\n\n            CSCoreSDK.SigningUtils.createSigningObject(response, this.getClient(), `${this.getPath()}/${(<BundleResponse>response).id}`);\n\n            return response;\n        });\n    }\n}\n\nexport interface BundleCreateRequest {\n\n    /**\n     * Name of the bundle.\n     */\n    name: string;\n\n    /**\n     * Array of items in bundle. Every item represents payment order for batch sign.\n     */\n    items: [{\n        id: string;\n        signInfo: {\n            state: string;\n            signId: string;\n        }\n    }];\n}\n\nexport interface BundleResponse extends CSCoreSDK.Signable {\n\n    /**\n     * Bundle identifier.\n     */\n    id: string;\n\n    /**\n     * Name of the bundle.\n     */\n    name?: string;\n\n    /**\n     * Array of items in bundle. Every item represents payment order for batch sign.\n     */\n    items: [{\n        id: string;\n        signInfo: SignInfo;\n    }];\n}\n\n\n/** WEBPACK FOOTER **\n ** ./lib/bundles/bundles.ts\n **/"],"sourceRoot":""}