{"version":3,"sources":["webpack:///cs-corporate-sdk.sfx.min.js","webpack:///webpack/bootstrap b8591b891be9cad7935c","webpack:///./lib/corporate.ts","webpack:///external \"CSCoreSDK\"","webpack:///./lib/accounts/accounts.ts","webpack:///./lib/accounts/balance.ts","webpack:///./lib/accounts/transactions.ts","webpack:///./lib/companies/companies.ts","webpack:///./lib/companies/campaigns.ts","webpack:///./lib/companies/relationship-managers.ts","webpack:///./lib/companies/photo/photo.ts","webpack:///./lib/companies/photo/info.ts"],"names":["CSCorporateSDK","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","getClient","sharedClient","CorporateClient","CSCoreSDK","config","copy","sharedContext","__extends","this","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","hasOwnProperty","__","constructor","prototype","create","defineProperty","value","accounts_1","companies_1","_super","context","_this","get","AccountsResource","getPath","enumerable","configurable","CompaniesResource","WebApiClient","balance_1","transactions_1","apply","arguments","list","params","ResourceUtils","CallPaginatedListWithSuffix","response","items","forEach","item","resourcifyListing","withId","accountId","AccountResource","Resource","BalanceResource","TransactionsResource","InstanceResource","AccountsSortableFields","account","accountReference","transactions","balance","CallGet","then","EntityUtils","addDatesFromISO","transformDatesToISO","transformArrayParamsToString","addDatesToItems","TransactionsSortableFields","campaigns_1","relationship_managers_1","CallListWithSuffix","regNum","ico","CompanyResource","CampaignsResource","RelationshipManagersResource","company","companyReference","isListing","campaigns","relationshipManagers","photo_1","isArray","employees","employee","empId","emplId","RelationshipManagerResource","RelationshipManagerPhotoResource","employeeReference","isFromListing","photo","info_1","download","CallDownload","RelationshipManagerPhotoInfoResource"],"mappings":"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","file":"cs-corporate-sdk.sfx.min.js","sourcesContent":["var CSCorporateSDK =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/// <reference types=\"es6-promise\" />\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar accounts_1 = __webpack_require__(2);\n\tvar companies_1 = __webpack_require__(5);\n\tvar sharedClient = null;\n\t/**\n\t * Returns the singleton CorporateClient\n\t * @returns {CorporateClient}\n\t */\n\tfunction getClient() {\n\t    if (sharedClient === null) {\n\t        return new CorporateClient(CSCoreSDK.config.copy(), CSCoreSDK.sharedContext);\n\t    }\n\t    return sharedClient;\n\t}\n\texports.getClient = getClient;\n\t/**\n\t * Corporate client\n\t * @class CorporateClient\n\t * @extends {CSCoreSDK.WebApiClient}\n\t */\n\tvar CorporateClient = /** @class */ (function (_super) {\n\t    __extends(CorporateClient, _super);\n\t    /**\n\t     * Creates new instance of CorporateClient\n\t     * @param {CSCoreSDK.WebApiConfiguration} config WebApiConfiguration object that configures this client\n\t     * @param {CSCoreSDK.WebApiContext} context WebApiContext object that allows for data sharing between clients\n\t     */\n\t    function CorporateClient(config, context) {\n\t        var _this = _super.call(this, config, '/api/v1/corporate/our') || this;\n\t        _this.sharedContext = context;\n\t        return _this;\n\t    }\n\t    Object.defineProperty(CorporateClient.prototype, \"accounts\", {\n\t        /**\n\t         * Get information about company accounts including balance and transactions\n\t         * @returns {AccountsResource}\n\t         */\n\t        get: function () {\n\t            return new accounts_1.AccountsResource(this.getPath() + \"/accounts\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CorporateClient.prototype, \"companies\", {\n\t        /**\n\t         * Get information about companies including theit campaings and relationship managers\n\t         * @returns {CompaniesResource}\n\t         */\n\t        get: function () {\n\t            return new companies_1.CompaniesResource(this.getPath() + \"/companies\", this);\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return CorporateClient;\n\t}(CSCoreSDK.WebApiClient));\n\texports.CorporateClient = CorporateClient;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n\tmodule.exports = CSCoreSDK;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar balance_1 = __webpack_require__(3);\n\tvar transactions_1 = __webpack_require__(4);\n\t/**\n\t * @class AccountsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Account>}\n\t */\n\tvar AccountsResource = /** @class */ (function (_super) {\n\t    __extends(AccountsResource, _super);\n\t    function AccountsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List bank accounts incl. basic account information the current user can see accordign to disposition model.\n\t         * @param {AccountsParameters=} params\n\t         * @returns {Promise<AccountList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'accounts', params, function (response) {\n\t                // Add convenience methods to listing items\n\t                response.items.forEach(function (item) {\n\t                    resourcifyListing(item, _this.withId(item.id));\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Returns Account resource with a given ID\n\t         * @param {number|string} accountId\n\t         * @returns {AccountResource}\n\t         */\n\t        _this.withId = function (accountId) {\n\t            return new AccountResource(accountId, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return AccountsResource;\n\t}(CSCoreSDK.Resource));\n\texports.AccountsResource = AccountsResource;\n\t/**\n\t * @class AccountResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t */\n\tvar AccountResource = /** @class */ (function (_super) {\n\t    __extends(AccountResource, _super);\n\t    function AccountResource() {\n\t        return _super !== null && _super.apply(this, arguments) || this;\n\t    }\n\t    Object.defineProperty(AccountResource.prototype, \"balance\", {\n\t        /**\n\t         * Returns resource for getting accounts balance\n\t         * @returns {BalanceResource}\n\t         */\n\t        get: function () {\n\t            return new balance_1.BalanceResource(this.getPath() + \"/balance\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(AccountResource.prototype, \"transactions\", {\n\t        /**\n\t         * Returns resource for getting accounts transactions\n\t         * @returns {TransactionsResource}\n\t         */\n\t        get: function () {\n\t            return new transactions_1.TransactionsResource(this.getPath() + \"/transactions\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return AccountResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.AccountResource = AccountResource;\n\tvar resourcifyListing = function (account, accountReference) {\n\t    account.transactions = accountReference.transactions;\n\t    account.balance = accountReference.balance;\n\t};\n\t/**\n\t * @enum AccountsSortableFields\n\t */\n\tvar AccountsSortableFields;\n\t(function (AccountsSortableFields) {\n\t    AccountsSortableFields[\"ID\"] = \"id\";\n\t})(AccountsSortableFields = exports.AccountsSortableFields || (exports.AccountsSortableFields = {}));\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class BalanceResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<AccountBalance>}\n\t */\n\tvar BalanceResource = /** @class */ (function (_super) {\n\t    __extends(BalanceResource, _super);\n\t    function BalanceResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get balance of the account\n\t         * @returns {Promise<AccountBalance>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                // transform ISO strings to date objects\n\t                CSCoreSDK.EntityUtils.addDatesFromISO('overdraftDueDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return BalanceResource;\n\t}(CSCoreSDK.Resource));\n\texports.BalanceResource = BalanceResource;\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class TransactionsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.PaginatedListEnabled<Transaction>}\n\t */\n\tvar TransactionsResource = /** @class */ (function (_super) {\n\t    __extends(TransactionsResource, _super);\n\t    function TransactionsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List accounts transactions\n\t         * @param {TransactionsParameters} params\n\t         * @returns {Promise<TransactionList>}\n\t         */\n\t        _this.list = function (params) {\n\t            // transform date objects to ISO strings\n\t            CSCoreSDK.EntityUtils.transformDatesToISO(['dateStart', 'dateEnd'], params);\n\t            // transform \"sort\" and \"order\" parameters to comma separated list from array\n\t            CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\t            return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(_this, null, 'transactions', params, function (response) {\n\t                // transform ISO strings to date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems(['valuationDate', 'bookingDate', 'currRateEURDate'], response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return TransactionsResource;\n\t}(CSCoreSDK.Resource));\n\texports.TransactionsResource = TransactionsResource;\n\t/**\n\t * @enum TransactionsSortableFields\n\t */\n\tvar TransactionsSortableFields;\n\t(function (TransactionsSortableFields) {\n\t    TransactionsSortableFields[\"ID\"] = \"id\";\n\t})(TransactionsSortableFields = exports.TransactionsSortableFields || (exports.TransactionsSortableFields = {}));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar campaigns_1 = __webpack_require__(6);\n\tvar relationship_managers_1 = __webpack_require__(7);\n\t/**\n\t * @class CampaignsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.HasInstanceResource<CompanyResource>}\n\t * @implements {CSCoreSDK.ListEnabled<Company>}\n\t */\n\tvar CompaniesResource = /** @class */ (function (_super) {\n\t    __extends(CompaniesResource, _super);\n\t    function CompaniesResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List of companies associated with client including the type of relationship from the current client to the subject.\n\t         * @returns {Promise<CompanyList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null).then(function (response) {\n\t                // Add convenience methods to listing items\n\t                response.items.forEach(function (item) {\n\t                    resourcifyListing(item, _this.withId(item.regNum), true);\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Get a Company resource for company with a given ico representing registration number\n\t         * @param {string|number} ico\n\t         * @returns {CompanyResource}\n\t         */\n\t        _this.withId = function (ico) {\n\t            return new CompanyResource(ico, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return CompaniesResource;\n\t}(CSCoreSDK.Resource));\n\texports.CompaniesResource = CompaniesResource;\n\t/**\n\t * @class CompanyResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<Company>}\n\t */\n\tvar CompanyResource = /** @class */ (function (_super) {\n\t    __extends(CompanyResource, _super);\n\t    function CompanyResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get company detail\n\t         * @returns {Promise<Company>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                // Add convenience methods to response\n\t                resourcifyListing(response, _this, false);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(CompanyResource.prototype, \"campaigns\", {\n\t        /**\n\t         * Returns CampaignsResource for listing company's campaigns\n\t         * @returns {CampaignsResource}\n\t         */\n\t        get: function () {\n\t            return new campaigns_1.CampaignsResource(this.getPath() + \"/campaigns\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    Object.defineProperty(CompanyResource.prototype, \"relationshipManagers\", {\n\t        /**\n\t         * Returns RelationshipManagersResource for listing company's relationship managers and info about them including photo\n\t         * @returns {RelationshipManagersResource}\n\t         */\n\t        get: function () {\n\t            return new relationship_managers_1.RelationshipManagersResource(this.getPath() + \"/relationshipmanagers\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return CompanyResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.CompanyResource = CompanyResource;\n\tvar resourcifyListing = function (company, companyReference, isListing) {\n\t    if (isListing) {\n\t        company.get = companyReference.get;\n\t    }\n\t    company.campaigns = companyReference.campaigns;\n\t    company.relationshipManagers = companyReference.relationshipManagers;\n\t};\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class CampaignsResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<Campaign>}\n\t */\n\tvar CampaignsResource = /** @class */ (function (_super) {\n\t    __extends(CampaignsResource, _super);\n\t    function CampaignsResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List marketing campaigns\n\t         * @returns {Promise<CampaignList>}\n\t         */\n\t        _this.list = function () {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null).then(function (response) {\n\t                // transform ISO strings to date objects\n\t                CSCoreSDK.EntityUtils.addDatesToItems('endDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return CampaignsResource;\n\t}(CSCoreSDK.Resource));\n\texports.CampaignsResource = CampaignsResource;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar photo_1 = __webpack_require__(8);\n\t/**\n\t * @class RelationshipManagersResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.ListEnabled<RelationshipManager>}\n\t * @implements {CSCoreSDK.HasInstanceResource<RelationshipManagerResource>}\n\t */\n\tvar RelationshipManagersResource = /** @class */ (function (_super) {\n\t    __extends(RelationshipManagersResource, _super);\n\t    function RelationshipManagersResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * List all relationship managers grouped by their positions. You will get an array of positions whilst each position may include one or more relationship managers. Typically there should be just one position flagged as primary as well as one contact in each position.\n\t         * You can filter for all positions (ALL) or for primary only (PRIMARY).\n\t         * @param {RelationshipManagerListParameters=} params\n\t         * @returns {Promise<RelationshipManagerList>}\n\t         */\n\t        _this.list = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallListWithSuffix(_this, null, null, params).then(function (response) {\n\t                // Add convenience methods to listing items\n\t                response.items.forEach(function (item) {\n\t                    if (Array.isArray(item.employees)) {\n\t                        item.employees.forEach(function (employee) {\n\t                            resourcifyListing(employee, _this.withId(employee.empId), true);\n\t                        });\n\t                    }\n\t                });\n\t                return response;\n\t            });\n\t        };\n\t        /**\n\t         * Returns RelationshipManagerResource for a given employee id\n\t         * @param {string|number} emplId\n\t         * @returns {RelationshipManagerResource}\n\t         */\n\t        _this.withId = function (emplId) {\n\t            return new RelationshipManagerResource(emplId, _this.getPath(), _this.getClient());\n\t        };\n\t        return _this;\n\t    }\n\t    return RelationshipManagersResource;\n\t}(CSCoreSDK.Resource));\n\texports.RelationshipManagersResource = RelationshipManagersResource;\n\t/**\n\t * @class RelationshipManagerResource\n\t * @extends {CSCoreSDK.InstanceResource}\n\t * @implements {CSCoreSDK.GetEnabled<EmployeeDetail>}\n\t */\n\tvar RelationshipManagerResource = /** @class */ (function (_super) {\n\t    __extends(RelationshipManagerResource, _super);\n\t    function RelationshipManagerResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get a reletionshipt manager detail\n\t         * @returns {Promise<EmployeeDetail>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                // Add convenience methods to response\n\t                resourcifyListing(response, _this, false);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(RelationshipManagerResource.prototype, \"photo\", {\n\t        /**\n\t         * Returns RelationshipManagerPhotoResource for getting relationship managers photo\n\t         * @returns {RelationshipManagerPhotoResource}\n\t         */\n\t        get: function () {\n\t            return new photo_1.RelationshipManagerPhotoResource(this.getPath() + \"/photo\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return RelationshipManagerResource;\n\t}(CSCoreSDK.InstanceResource));\n\texports.RelationshipManagerResource = RelationshipManagerResource;\n\tvar resourcifyListing = function (employee, employeeReference, isFromListing) {\n\t    if (isFromListing) {\n\t        employee.get = employeeReference.get;\n\t    }\n\t    employee.photo = employeeReference.photo;\n\t};\n\t;\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\tvar info_1 = __webpack_require__(9);\n\t/**\n\t * @class RelationshipManagerPhotoResource\n\t * @implements {CSCoreSDK.Resource}\n\t */\n\tvar RelationshipManagerPhotoResource = /** @class */ (function (_super) {\n\t    __extends(RelationshipManagerPhotoResource, _super);\n\t    function RelationshipManagerPhotoResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Download relations managers photo.\n\t         * @param {RelationshipManagerPhotoDownloadParameters} params\n\t         * @returns {Promise<Uint8Array>}\n\t         */\n\t        _this.download = function (params) {\n\t            return CSCoreSDK.ResourceUtils.CallDownload(_this, null, 'GET', params);\n\t        };\n\t        return _this;\n\t    }\n\t    Object.defineProperty(RelationshipManagerPhotoResource.prototype, \"info\", {\n\t        /**\n\t         * Returns RelationshipManagerPhotoInfoResource for getting infomation about the photo\n\t         * @returns {RelationshipManagerPhotoInfoResource}\n\t         */\n\t        get: function () {\n\t            return new info_1.RelationshipManagerPhotoInfoResource(this.getPath() + \"/info\", this.getClient());\n\t        },\n\t        enumerable: true,\n\t        configurable: true\n\t    });\n\t    return RelationshipManagerPhotoResource;\n\t}(CSCoreSDK.Resource));\n\texports.RelationshipManagerPhotoResource = RelationshipManagerPhotoResource;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar __extends = (this && this.__extends) || (function () {\n\t    var extendStatics = Object.setPrototypeOf ||\n\t        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n\t        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n\t    return function (d, b) {\n\t        extendStatics(d, b);\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t})();\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\tvar CSCoreSDK = __webpack_require__(1);\n\t/**\n\t * @class RelationshipManagerPhotoInfoResource\n\t * @extends {CSCoreSDK.Resource}\n\t * @implements {CSCoreSDK.GetEnabled<RelationshipManagerPhotoInfo>}\n\t */\n\tvar RelationshipManagerPhotoInfoResource = /** @class */ (function (_super) {\n\t    __extends(RelationshipManagerPhotoInfoResource, _super);\n\t    function RelationshipManagerPhotoInfoResource() {\n\t        var _this = _super !== null && _super.apply(this, arguments) || this;\n\t        /**\n\t         * Get information about the relationship manager photo\n\t         * @returns {Promise<RelationshipManagerPhotoInfo>}\n\t         */\n\t        _this.get = function () {\n\t            return CSCoreSDK.ResourceUtils.CallGet(_this, null).then(function (response) {\n\t                // transform ISO strings to date objects\n\t                CSCoreSDK.EntityUtils.addDatesFromISO('agreementDate', response);\n\t                return response;\n\t            });\n\t        };\n\t        return _this;\n\t    }\n\t    return RelationshipManagerPhotoInfoResource;\n\t}(CSCoreSDK.Resource));\n\texports.RelationshipManagerPhotoInfoResource = RelationshipManagerPhotoInfoResource;\n\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// cs-corporate-sdk.sfx.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b8591b891be9cad7935c","/// <reference types=\"es6-promise\" />\n\nimport * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountsResource } from './accounts/accounts';\nimport { CompaniesResource } from './companies/companies';\n\nvar sharedClient: CorporateClient = null;\n\n/**\n * Returns the singleton CorporateClient\n * @returns {CorporateClient}\n */\nexport function getClient(): CorporateClient {\n  if (sharedClient === null) {\n    return new CorporateClient(CSCoreSDK.config.copy(), CSCoreSDK.sharedContext);\n  }\n\n  return sharedClient;\n}\n\n/**\n * Corporate client\n * @class CorporateClient\n * @extends {CSCoreSDK.WebApiClient}\n */\nexport class CorporateClient extends CSCoreSDK.WebApiClient {\n\n  /**\n   * Creates new instance of CorporateClient\n   * @param {CSCoreSDK.WebApiConfiguration} config WebApiConfiguration object that configures this client\n   * @param {CSCoreSDK.WebApiContext} context WebApiContext object that allows for data sharing between clients\n   */\n  constructor(config: CSCoreSDK.WebApiConfiguration, context: CSCoreSDK.WebApiContext) {\n    super(config, '/api/v1/corporate/our');\n    this.sharedContext = context;\n  }\n\n  /**\n   * Get information about company accounts including balance and transactions\n   * @returns {AccountsResource}\n   */\n  get accounts(): AccountsResource {\n    return new AccountsResource(`${this.getPath()}/accounts`, this);\n  }\n\n  /**\n   * Get information about companies including theit campaings and relationship managers\n   * @returns {CompaniesResource}\n   */\n  get companies(): CompaniesResource {\n    return new CompaniesResource(`${this.getPath()}/companies`, this);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/corporate.ts","module.exports = CSCoreSDK;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"CSCoreSDK\"\n// module id = 1\n// module chunks = 0","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber } from '../common';\nimport { BalanceResource } from './balance';\nimport { TransactionsResource } from './transactions';\n\n/**\n * @class AccountsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Account>}\n */\nexport class AccountsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Account> {\n\n  /**\n   * List bank accounts incl. basic account information the current user can see accordign to disposition model.\n   * @param {AccountsParameters=} params\n   * @returns {Promise<AccountList>}\n   */\n  list = (params?: AccountsParameters): Promise<AccountList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'accounts', params, response => {\n\n      // Add convenience methods to listing items\n      response.items.forEach(item => {\n        resourcifyListing(<Account>item, this.withId((<Account>item).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns Account resource with a given ID\n   * @param {number|string} accountId\n   * @returns {AccountResource}\n   */\n  withId = (accountId: number | string): AccountResource => {\n    return new AccountResource(accountId, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class AccountResource\n * @extends {CSCoreSDK.InstanceResource}\n */\nexport class AccountResource extends CSCoreSDK.InstanceResource {\n\n  /**\n   * Returns resource for getting accounts balance\n   * @returns {BalanceResource}\n   */\n  get balance(): BalanceResource {\n    return new BalanceResource(`${this.getPath()}/balance`, this.getClient());\n  }\n\n  /**\n   * Returns resource for getting accounts transactions\n   * @returns {TransactionsResource}\n   */\n  get transactions(): TransactionsResource {\n    return new TransactionsResource(`${this.getPath()}/transactions`, this.getClient());\n  }\n}\n\nconst resourcifyListing = (account: Account, accountReference: AccountResource) => {\n  account.transactions = accountReference.transactions;\n  account.balance = accountReference.balance;\n}\n\n/**\n * @enum AccountsSortableFields\n */\nexport enum AccountsSortableFields {\n  ID = 'id',\n}\n\n/**\n * @interface AccountsParameters\n * @extends {CSCoreSDK.Sortable}\n * @extends {CSCoreSDK.Paginated}\n */\nexport interface AccountsParameters extends CSCoreSDK.Sortable<AccountsSortableFields>, CSCoreSDK.Paginated { }\n\n/**\n * @interface AccountList\n * @extends {CSCoreSDK.PaginatedListResponse<Account>}\n */\nexport interface AccountList extends CSCoreSDK.PaginatedListResponse<Account> { }\n\n/**\n * @interface Account\n */\nexport interface Account {\n\n  /**\n   * product instance id used to uniquely reference the particular product instance (IBAN is not always present and account number does not always uniquely identify an account/product instance)\n   */\n  id: string;\n\n  /**\n   * Account info object\n   */\n  accountNo?: AccountNumber;\n\n  /**\n   * Name of the bank account\n   */\n  accountType: string;\n\n  /**\n   * Currency of the bank account\n   */\n  currency: string;\n\n  /**\n   * Account owner\n   */\n  accountOwner: AccountOwner;\n\n  /**\n  * Convenience getter for getting accounts's transactions resource\n  */\n  transactions: TransactionsResource;\n\n  /**\n  * Convenience getter for getting accounts's balance resource\n  */\n  balance: BalanceResource;\n}\n\n/**\n * @interface AccountOwner\n */\nexport interface AccountOwner {\n\n  /**\n   * Company owns the account\n   */\n  company?: {\n\n    /**\n     * Name of the client company\n     */\n    name: string;\n\n    /**\n     * Registration number (ICO) of the client company\n     */\n    regNum: string;\n  };\n\n  /**\n   * Related person for given account\n   */\n  person?: {\n\n    /**\n     * First name of a person\n     */\n    firstName: string;\n\n    /**\n     * Last name of a person\n     */\n    lastName: string;\n\n    /**\n     * Title of a person\n     */\n    title?: string;\n\n    /**\n     * Additional title of a person\n     */\n    additionalTitle?: string;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/accounts.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\n/**\n * @class BalanceResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<AccountBalance>}\n */\nexport class BalanceResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<AccountBalance> {\n\n  /**\n   * Get balance of the account\n   * @returns {Promise<AccountBalance>}\n   */\n  get = (): Promise<AccountBalance> => {\n\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO('overdraftDueDate', response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface AccountBalance\n */\nexport interface AccountBalance {\n\n  /**\n   * Ledger balance info\n   */\n  balance?: Amount;\n\n  /**\n   * Current available balance info\n   */\n  disposable?: Amount;\n\n  /**\n   * Minimal balance to be kept\n   */\n  minBalance?: number;\n\n  /**\n   * Overdraft info\n   */\n  overdraft?: Amount;\n\n  /**\n   * Overdraft due date\n   */\n  overdraftDueDate?: Date;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/balance.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber, Amount } from '../common';\n\n/**\n * @class TransactionsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.PaginatedListEnabled<Transaction>}\n */\nexport class TransactionsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.PaginatedListEnabled<Transaction> {\n\n  /**\n   * List accounts transactions\n   * @param {TransactionsParameters} params\n   * @returns {Promise<TransactionList>}\n   */\n  list = (params: TransactionsParameters): Promise<TransactionList> => {\n\n    // transform date objects to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO(['dateStart', 'dateEnd'], params);\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'transactions', params, response => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesToItems(['valuationDate', 'bookingDate', 'currRateEURDate'], response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @enum TransactionsSortableFields\n */\nexport enum TransactionsSortableFields {\n  ID = 'id',\n}\n\n/**\n * @interface TransactionsParameters\n * @extends {CSCoreSDK.Paginated}\n * @extends {CSCoreSDK.Sortable}\n */\nexport interface TransactionsParameters extends CSCoreSDK.Paginated, CSCoreSDK.Sortable<TransactionsSortableFields> {\n\n  /**\n   * transactions from \n   */\n  dateStart: Date;\n\n  /**\n   * transactions to\n   */\n  dateEnd: Date;\n}\n\n/**\n * @interface TransactionList\n * @extends {CSCoreSDK.PaginatedListResponse<Transaction>}\n */\nexport interface TransactionList extends CSCoreSDK.PaginatedListResponse<Transaction> { }\n\n/**\n * @interface Transaction\n */\nexport interface Transaction {\n\n  /**\n   * transaction reference ID\n   */\n  id: string;\n\n  /**\n   * transaction party info\n   */\n  accountParty?: AccountNumber;\n\n  /**\n   * Amount\n   */\n  amount?: Amount;\n\n  /**\n   * Sender amount\n   */\n  amountSender?: Amount;\n\n  /**\n   * date of booking\n   */\n  bookingDate?: Date;\n\n  /**\n   * number of card used in transaction\n   */\n  cardNumber?: number;\n\n  /**\n   * constant symbol\n   */\n  constantSymbol?: string;\n\n  /**\n   * conversion rates in EUR\n   */\n  currRateEURValue?: string;\n\n  /**\n   * date of conversion\n   */\n  currRateEURDate?: Date;\n\n  /**\n   * user description of the transaction\n   */\n  description?: string;\n\n  /**\n   * note for payee (\"zpráva pro příjemce\"). Up to 140 chars. For foreign transactions, additional info about currency rate etc.\n   */\n  payeeNote?: string;\n\n  /**\n   * note for payer (\"zpráva pro mě\"). Up to 140 chars.\n   */\n  payerNote?: string;\n\n  /**\n   * specific symbol\n   */\n  specificSymbol?: string;\n\n  /**\n   * type of transaction\n   */\n  transactionType: string;\n\n  /**\n   * localized type of transaction\n   */\n  transactionTypeI18N?: string;\n\n  /**\n   * date of valuation\n   */\n  valuationDate?: Date;\n\n  /**\n   * variable symbol\n   */\n  variableSymbol?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/transactions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { CampaignsResource } from './campaigns';\nimport { RelationshipManagersResource } from './relationship-managers';\n\n/**\n * @class CampaignsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.HasInstanceResource<CompanyResource>}\n * @implements {CSCoreSDK.ListEnabled<Company>}\n */\nexport class CompaniesResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.HasInstanceResource<CompanyResource>, CSCoreSDK.ListEnabled<Company> {\n\n  /**\n   * List of companies associated with client including the type of relationship from the current client to the subject.\n   * @returns {Promise<CompanyList>}\n   */\n  list = (): Promise<CompanyList> => {\n\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null).then((response: CompanyList) => {\n\n      // Add convenience methods to listing items\n      response.items.forEach(item => {\n        resourcifyListing(<Company>item, this.withId((<Company>item).regNum), true);\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Get a Company resource for company with a given ico representing registration number\n   * @param {string|number} ico\n   * @returns {CompanyResource}\n   */\n  withId = (ico: string | number): CompanyResource => {\n\n    return new CompanyResource(ico, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class CompanyResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<Company>}\n */\nexport class CompanyResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<Company> {\n\n  /**\n   * Get company detail\n   * @returns {Promise<Company>}\n   */\n  get = (): Promise<Company> => {\n\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then((response: Company) => {\n\n      // Add convenience methods to response\n      resourcifyListing(<Company>response, this, false);\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns CampaignsResource for listing company's campaigns\n   * @returns {CampaignsResource}\n   */\n  get campaigns(): CampaignsResource {\n\n    return new CampaignsResource(`${this.getPath()}/campaigns`, this.getClient());\n  }\n\n  /**\n   * Returns RelationshipManagersResource for listing company's relationship managers and info about them including photo\n   * @returns {RelationshipManagersResource}\n   */\n  get relationshipManagers(): RelationshipManagersResource {\n\n    return new RelationshipManagersResource(`${this.getPath()}/relationshipmanagers`, this.getClient());\n  }\n}\n\nconst resourcifyListing = (company: Company, companyReference: CompanyResource, isListing) => {\n  if (isListing) {\n    company.get = companyReference.get;\n  }\n  company.campaigns = companyReference.campaigns;\n  company.relationshipManagers = companyReference.relationshipManagers;\n}\n\n/**\n * @interface CompanyList\n * @extends {CSCoreSDK.ListResponse<Company>}\n */\nexport interface CompanyList extends CSCoreSDK.ListResponse<Company> { }\n\n/**\n * @interface Company\n */\nexport interface Company {\n\n  /**\n   * registration number (ICO)\n   */\n  regNum: number;\n\n  /**\n   * taxation number (DIC)\n   */\n  taxNum?: number;\n\n  /**\n   * Legal form of the company (codebook)\n   */\n  legalForm?: string;\n\n  /**\n   * Localized name of the legal form of the company\n   */\n  legalFormI18N?: string;\n\n  /**\n   * Name of the company\n   */\n  name: string;\n\n  /**\n   * Profile data (like industry sector)\n   */\n  companyProfile?: {\n\n    /**\n     * Company type according to CNB (codebook)\n     */\n    cnbType?: string;\n\n    /**\n     * Localized name of the company type according to CNB\n     */\n    cnbTypeI18N?: string;\n\n    /**\n     * NACE industry code (codebook)\n     */\n    industryCategory?: string;\n\n    /**\n     * Localized name of the NACE industry code\n     */\n    industryCategoryI18N?: string;\n\n    /**\n     * Sector according to CSU (codebook)\n     */\n    sector?: string;\n\n    /**\n     * Localized name of sector according to CSU\n     */\n    sectorI18N?: string;\n  }\n\n  /**\n   * Type of relationship\n   */\n  relationshipType?: {\n\n    /**\n     * \tCode of type of the relationship (codebook)\n     */\n    relationshipType?: string;\n\n    /**\n     * Name of the relationship type (like '100% Vlastník')\n     */\n    relationshipTypeI18N?: string;\n  }\n\n  /**\n   * Convenience getter for getting companies's campaigns resource\n   */\n  campaigns: CampaignsResource;\n\n  /**\n   * Convenience getter for getting companies's relationship managers resource\n   */\n  relationshipManagers: RelationshipManagersResource;\n\n  /**\n   * Convenience method for getting detail of the company right from the list \n   * @returns {Promise<Company>}\n   */\n  get: () => Promise<Company>;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/companies.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class CampaignsResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<Campaign>}\n */\nexport class CampaignsResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<Campaign> {\n\n  /**\n   * List marketing campaigns\n   * @returns {Promise<CampaignList>}\n   */\n  list = (): Promise<CampaignList> => {\n\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null).then((response: CampaignList) => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('endDate', response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface CampaignList\n * @extends {CSCoreSDK.ListResponse<Campaign>}\n */\nexport interface CampaignList extends CSCoreSDK.ListResponse<Campaign> { }\n\n/**\n * @interface Campaign\n */\nexport interface Campaign {\n\n  /**\n   * Id of a campaign\n   */\n  id: string;\n\n  /**\n   * name of campaign\n   */\n  name?: string;\n\n  /**\n   * End date of a campaign\n   */\n  endDate?: Date;\n\n  /**\n   * Channel of a campaign\n   */\n  channel?: string;\n\n  /**\n   * Comment \n   */\n  comment?: string;\n\n  /**\n   * Target number group\n   */\n  targetListId?: number;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/campaigns.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { RelationshipManagerPhotoResource } from './photo/photo';\n\n/**\n * @class RelationshipManagersResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.ListEnabled<RelationshipManager>}\n * @implements {CSCoreSDK.HasInstanceResource<RelationshipManagerResource>}\n */\nexport class RelationshipManagersResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<RelationshipManager>, CSCoreSDK.HasInstanceResource<RelationshipManagerResource> {\n\n  /**\n   * List all relationship managers grouped by their positions. You will get an array of positions whilst each position may include one or more relationship managers. Typically there should be just one position flagged as primary as well as one contact in each position. \n   * You can filter for all positions (ALL) or for primary only (PRIMARY).\n   * @param {RelationshipManagerListParameters=} params\n   * @returns {Promise<RelationshipManagerList>}\n   */\n  list = (params?: RelationshipManagerListParameters): Promise<RelationshipManagerList> => {\n\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, null, params).then((response: RelationshipManagerList) => {\n\n      // Add convenience methods to listing items\n      response.items.forEach(item => {\n        if (Array.isArray((<RelationshipManager>item).employees)) {\n\n          (<RelationshipManager>item).employees.forEach(employee => {\n            resourcifyListing(<ListingEmployee>employee, this.withId((<ListingEmployee>employee).empId), true);\n          });\n        }\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns RelationshipManagerResource for a given employee id\n   * @param {string|number} emplId\n   * @returns {RelationshipManagerResource}\n   */\n  withId = (emplId: string | number): RelationshipManagerResource => {\n\n    return new RelationshipManagerResource(emplId, this.getPath(), this.getClient());\n  }\n}\n\n/**\n * @class RelationshipManagerResource\n * @extends {CSCoreSDK.InstanceResource}\n * @implements {CSCoreSDK.GetEnabled<EmployeeDetail>}\n */\nexport class RelationshipManagerResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<EmployeeDetail> {\n\n  /**\n   * Get a reletionshipt manager detail\n   * @returns {Promise<EmployeeDetail>}\n   */\n  get = (): Promise<EmployeeDetail> => {\n\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then((response: EmployeeDetail) => {\n\n      // Add convenience methods to response\n      resourcifyListing(<EmployeeDetail>response, this, false);\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns RelationshipManagerPhotoResource for getting relationship managers photo\n   * @returns {RelationshipManagerPhotoResource}\n   */\n  get photo(): RelationshipManagerPhotoResource {\n\n    return new RelationshipManagerPhotoResource(`${this.getPath()}/photo`, this.getClient());\n  }\n}\n\nconst resourcifyListing = (employee: ListingEmployee | EmployeeDetail, employeeReference: RelationshipManagerResource, isFromListing) => {\n  if (isFromListing) {\n    (<any>employee).get = employeeReference.get;\n  }\n  employee.photo = employeeReference.photo;\n}\n\n/**\n * @interface RelationshipManagerListParameters\n */\nexport interface RelationshipManagerListParameters {\n\n  /**\n   * Filter for all positions (ALL) or for primary only (PRIMARY).\n   */\n  filter?: string;\n}\n\n/**\n * @interface RelationshipManagerList\n * @extends {CSCoreSDK.ListResponse<RelationshipManager>}\n */\nexport interface RelationshipManagerList extends CSCoreSDK.ListResponse<RelationshipManager> { }\n\n/**\n * @interface RelationshipManager\n */\nexport interface RelationshipManager {\n\n  /**\n   * Position identifier.\n   */\n  id: string;\n\n  /**\n   * \tPosition name.\n   */\n  name: string;\n\n  /**\n   * Marks a positions as primary for a client.\n   */\n  primaryFlag?: boolean;\n\n  /**\n   * List of branch specialists in this position\n   */\n  employees: [ListingEmployee];\n}\n\n/**\n * @interface Employee\n */\nexport interface Employee {\n\n  /**\n   * Employee id, used in API-s like PhoneBook\n   */\n  empId?: number;\n\n  /**\n   * Specialist's first name.\n   */\n  firstName: string;\n\n  /**\n   * Specialist's last name.\n   */\n  lastName: string;\n\n  /**\n  * Convenience getter for getting relationship managers's photo resource\n  */\n  photo: RelationshipManagerPhotoResource;\n\n  /**\n   * Convenience method for getting detail of the relationship manager from the list \n   * @returns {Promise<Employee>|Promise<RelationshipManager>}\n   */\n  get: () => Promise<Employee | RelationshipManager>;\n}\n\n/**\n * @interface ListingEmployee\n * @extends {Employee}\n */\nexport interface ListingEmployee extends Employee {\n\n  /**\n   * Marks a specialist as primary for a client.\n   */\n  primaryFlag?: boolean;\n}\n\n/**\n * @interface EmployeeDetail\n * @extends {Employee}\n */\nexport interface EmployeeDetail extends Employee {\n\n  /**\n   * Employee personal number\n   */\n  personalNumber?: number;\n\n  /**\n   * Title\n   */\n  titleA?: string;\n\n  /**\n   * Title\n   */\n  titleB?: string;\n\n  /**\n   * First name\n   */\n  name?: string;\n\n  /**\n   * Surname\n   */\n  surname?: string;\n\n  /**\n   * Full name composite\n   */\n  fullName?: string;\n\n  /**\n   * Enumeration: MALE/FEMALE\n   */\n  gender?: string;\n\n  /**\n   * Identifier of employee manager\n   */\n  employeeManagerId?: number;\n\n  /**\n   * Identifier of employee team\n   */\n  teamId?: string;\n\n  /**\n   * Contact details\n   */\n  contact?: {\n\n    /**\n     * Employee login name\n     */\n    loginName?: string;\n\n    /**\n     * Email of the employee\n     */\n    email?: string;\n\n    /**\n     * Phone 1 number\n     */\n    phone1?: string;\n\n    /**\n     * Phone 2 number\n     */\n    phone2?: string;\n\n    /**\n     * Fax number\n     */\n    fax?: string;\n\n    /**\n     * Mobile number\n     */\n    mobil?: string;\n\n    /**\n     * Office number\n     */\n    officeNumber?: string;\n\n    /**\n     * Contact cost unit\n     */\n    costUnit?: number;\n\n    /**\n     * Contact location unit\n     */\n    locationUnit?: string;\n\n    /**\n     * Building details\n     */\n    building?: {\n\n      /**\n       * Building identifier\n       */\n      id?: number;\n\n      /**\n       * Company code\n       */\n      companyCode?: string;\n\n      /**\n       * Street name of a building\n       */\n      street?: string;\n\n      /**\n       * City of a building\n       */\n      city?: string;\n\n      /**\n       * Postcode of a building\n       */\n      postCode?: string;\n\n      /**\n       * Country info\n       */\n      country?: {\n\n        /**\n         * Country code of a building\n         */\n        country?: string;\n\n        /**\n         * Localized country name\n         */\n        nameI18N?: string;\n      };\n    };\n  };\n\n  /**\n   * Department Info\n   */\n  department?: {\n\n    /**\n     * Country name of a building\n     */\n    id?: number;\n\n    /**\n     * Department code\n     */\n    departmentCode?: string;\n\n    /**\n     * Department name\n     */\n    nameI18N?: string;\n\n    /**\n     * Department head id\n     */\n    headId?: number;\n\n    /**\n     * Department parent id\n     */\n    parentId?: number;\n\n    /**\n     * Company info\n     */\n    company?: {\n\n      /**\n       * Company code\n       */\n      companyCode?: string;\n\n      /**\n       * Company name\n       */\n      nameI18N?: string;\n\n      /**\n       * Company name in English\n       */\n      nameI18N_EN?: string;\n\n      /**\n       * Department prefix\n       */\n      departmentPrefix?: number;\n\n      /**\n       * Company code\n       */\n      displayCode?: string;\n\n      /**\n       * Manually updated flag\n       */\n      manuallyUpdated?: boolean;\n\n      /**\n       * Department exists flag\n       */\n      departmentExists?: boolean;\n    };\n\n  };\n\n  /**\n   * Position info\n   */\n  position?: {\n\n    /**\n     * Position identifier\n     */\n    id?: number;\n\n    /**\n     * Position code\n     */\n    positionCode?: string;\n\n    /**\n     * Position description\n     */\n    descriptionI18N?: string;\n\n    /**\n     * Company code\n     */\n    companyCode?: string;\n  };\n\n  /**\n  * Convenience getter for getting relationship manager's photo resource\n  */\n  photo: RelationshipManagerPhotoResource;\n\n  /**\n   * Convenience method for getting detail of the relationship manager right from the list \n   * @returns {Promise<RelationshipManager>}\n   */\n  get: () => Promise<RelationshipManager>;\n};\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/relationship-managers.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { RelationshipManagerPhotoInfoResource } from './info';\n\n/**\n * @class RelationshipManagerPhotoResource\n * @implements {CSCoreSDK.Resource}\n */\nexport class RelationshipManagerPhotoResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ParametrizedDownloadEnabled<RelationshipManagerPhotoDownloadParameters, Uint8Array> {\n\n  /**\n   * Download relations managers photo. \n   * @param {RelationshipManagerPhotoDownloadParameters} params\n   * @returns {Promise<Uint8Array>}\n   */\n  download = (params: RelationshipManagerPhotoDownloadParameters): Promise<Uint8Array> => {\n\n    return CSCoreSDK.ResourceUtils.CallDownload(this, null, 'GET', params);\n  }\n\n  /**\n   * Returns RelationshipManagerPhotoInfoResource for getting infomation about the photo\n   * @returns {RelationshipManagerPhotoInfoResource}\n   */\n  get info(): RelationshipManagerPhotoInfoResource {\n\n    return new RelationshipManagerPhotoInfoResource(`${this.getPath()}/info`, this.getClient());\n  }\n}\n\n/**\n * @interface RelationshipManagerPhotoDownloadParameters\n */\nexport interface RelationshipManagerPhotoDownloadParameters {\n\n  /**\n   * type of photo (BW, THUMBNAIL, MINI, STANDARD, LARGE)\n   */\n  type: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/photo/photo.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\n/**\n * @class RelationshipManagerPhotoInfoResource\n * @extends {CSCoreSDK.Resource}\n * @implements {CSCoreSDK.GetEnabled<RelationshipManagerPhotoInfo>}\n */\nexport class RelationshipManagerPhotoInfoResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.GetEnabled<RelationshipManagerPhotoInfo> {\n\n  /**\n   * Get information about the relationship manager photo\n   * @returns {Promise<RelationshipManagerPhotoInfo>}\n   */\n  get = (): Promise<RelationshipManagerPhotoInfo> => {\n\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO('agreementDate', response);\n\n      return response;\n    });\n  }\n}\n\n/**\n * @interface RelationshipManagerPhotoInfo\n */\nexport interface RelationshipManagerPhotoInfo {\n\n  /**\n   * employee identifier\n   */\n  empId?: number;\n\n  /**\n   * agreement time\n   */\n  agreementDate?: Date;\n\n  /**\n   * mime type of photos\n   */\n  mimeType?: string;\n\n  /**\n   * Returns true if photo was approved\n   */\n  agreement?: boolean;\n\n  /**\n   * list of available photos\n   */\n  types?: [string];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/photo/info.ts"],"sourceRoot":""}