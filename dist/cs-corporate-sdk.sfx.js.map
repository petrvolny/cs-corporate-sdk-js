{"version":3,"sources":["webpack:///webpack/bootstrap 8586c1d992e568f62f15","webpack:///./lib/corporate.ts","webpack:///external \"CSCoreSDK\"","webpack:///./lib/accounts/accounts.ts","webpack:///./lib/accounts/balance.ts","webpack:///./lib/accounts/transactions.ts","webpack:///./lib/companies/companies.ts","webpack:///./lib/companies/campaigns.ts","webpack:///./lib/companies/relationship-managers.ts","webpack:///./lib/companies/photo/photo.ts","webpack:///./lib/companies/photo/info.ts"],"names":[],"mappings":"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","file":"cs-corporate-sdk.sfx.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8586c1d992e568f62f15","/// <reference types=\"es6-promise\" />\n\nimport * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountsResource } from './accounts/accounts';\nimport { CompaniesResource } from './companies/companies';\n\nvar sharedClient : CorporateClient = null;\n\n/*+\n * Returns the singleton CorporateClient\n */\nexport function getClient() {\n    if (sharedClient === null) {\n        return new CorporateClient(CSCoreSDK.config.copy(), CSCoreSDK.sharedContext);\n    }\n    \n    return sharedClient;\n}\n\n/**\n * Corporate client \n */\nexport class CorporateClient extends CSCoreSDK.WebApiClient {\n    \n    /**\n     * Creates new instance of CorporateClient\n     * \n     * @param config WebApiConfiguration object that configures this client\n     * @param context WebApiContext object that allows for data sharing between clients\n     */\n    constructor(config: CSCoreSDK.WebApiConfiguration, context: CSCoreSDK.WebApiContext) {\n        super(config, '/api/v1/corporate/our');\n        this.sharedContext = context;\n    }\n\n    /**\n     * Get information about company accounts including balance and transactions\n     */\n    get accounts(): AccountsResource {\n        return new AccountsResource(`${this.getPath()}/accounts`, this);\n    }\n\n    /**\n     * Get information about companies including theit campaings and relationship managers\n     */\n    get companies(): CompaniesResource {\n        return new CompaniesResource(`${this.getPath()}/companies`, this);\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/corporate.ts","module.exports = CSCoreSDK;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"CSCoreSDK\"\n// module id = 1\n// module chunks = 0","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber } from '../common';\nimport { BalanceResource } from './balance';\nimport { TransactionsResource } from './transactions';\n\nexport class AccountsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Account> {\n\n  /**\n   * List bank accounts incl. basic account information the current user can see accordign to disposition model.\n   */\n  list = (params?: AccountsParameters): Promise<AccountList> => {\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'accounts', params, response => {\n\n      // Add convenience methods to listing items\n      response.items.forEach(item => {\n        resourcifyListing(<Account>item, this.withId((<Account>item).id));\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns Account resource with a given ID\n   */\n  withId = (accountId: number|string): AccountResource => {\n    return new AccountResource(accountId, this.getPath(), this.getClient());\n  }\n}\n\nexport class AccountResource extends CSCoreSDK.InstanceResource {\n\n  /**\n   * Returns resource for getting accounts balance\n   */\n  get balance(): BalanceResource {\n    return new BalanceResource(`${this.getPath()}/balance`, this.getClient());\n  }\n\n  /**\n   * Returns resource for getting accounts transactions\n   */\n  get transactions(): TransactionsResource {\n    return new TransactionsResource(`${this.getPath()}/transactions`, this.getClient());\n  }\n}\n\nconst resourcifyListing = (account: Account, accountReference: AccountResource) => {\n  account.transactions = accountReference.transactions;\n  account.balance = accountReference.balance;\n}\n\nexport interface AccountsParameters extends CSCoreSDK.Sortable, CSCoreSDK.Paginated {}\n\nexport interface AccountList extends CSCoreSDK.PaginatedListResponse<Account> {}\n\nexport interface Account {\n\n  /**\n   * product instance id used to uniquely reference the particular product instance (IBAN is not always present and account number does not always uniquely identify an account/product instance)\n   */\n  id: string;\n\n  /**\n   * Account info object\n   */\n  accountNo?: AccountNumber;\n\n  /**\n   * Name of the bank account\n   */\n  accountType: string;\n\n  /**\n   * Currency of the bank account\n   */\n  currency: string;\n\n  /**\n   * Account owner\n   */\n  accountOwner: AccountOwner;\n\n  /**\n  * Convenience getter for getting accounts's transactions resource\n  */\n  transactions: TransactionsResource;\n\n  /**\n  * Convenience getter for getting accounts's balance resource\n  */\n  balance: BalanceResource;\n}\n\nexport interface AccountOwner {\n\n  /**\n   * Company owns the account\n   */\n  company?: {\n\n    /**\n     * Name of the client company\n     */\n    name: string;\n\n    /**\n     * Registration number (ICO) of the client company\n     */\n    regNum: string;\n  };\n\n  /**\n   * Related person for given account\n   */\n  person?: {\n\n    /**\n     * First name of a person\n     */\n    firstName: string;\n\n    /**\n     * Last name of a person\n     */\n    lastName: string;\n\n    /**\n     * Title of a person\n     */\n    title?: string;\n\n    /**\n     * Additional title of a person\n     */\n    additionalTitle?: string;\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/accounts.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { Amount } from '../common';\n\nexport class BalanceResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<AccountBalance> {\n\n  /**\n   * Get balance of the account\n   */\n  get = (): Promise<AccountBalance> => {\n\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO('overdraftDueDate', response);\n\n      return response;\n    });\n  }\n}\n\nexport interface AccountBalance {\n\n  /**\n   * Ledger balance info\n   */\n  balance?: Amount;\n\n  /**\n   * Current available balance info\n   */\n  disposable?: Amount;\n\n  /**\n   * Minimal balance to be kept\n   */\n  minBalance?: number;\n\n  /**\n   * Overdraft info\n   */\n  overdraft?: Amount;\n\n  /**\n   * Overdraft due date\n   */\n  overdraftDueDate?: Date;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/balance.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { AccountNumber, Amount } from '../common';\n\nexport class TransactionsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.PaginatedListEnabled<Transaction> {\n\n  /**\n   * List accounts transactions\n   */\n  list = (params: TransactionsParameters): Promise<TransactionList> => {\n    \n    // transform date objects to ISO strings\n    CSCoreSDK.EntityUtils.transformDatesToISO(['dateStart', 'dateEnd'], params);\n\n    // transform \"sort\" and \"order\" parameters to comma separated list from array\n    CSCoreSDK.EntityUtils.transformArrayParamsToString(params, ['sort', 'order']);\n\n    return CSCoreSDK.ResourceUtils.CallPaginatedListWithSuffix(this, null, 'transactions', params, response => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesToItems(['valuationDate', 'bookingDate', 'currRateEURDate'], response);\n\n      return response;\n    });\n  }\n}\n\nexport interface TransactionsParameters extends CSCoreSDK.Paginated, CSCoreSDK.Sortable {\n\n  /**\n   * transactions from \n   */\n  dateStart: Date;\n\n  /**\n   * transactions to\n   */\n  dateEnd: Date;\n}\n\nexport interface TransactionList extends CSCoreSDK.PaginatedListResponse<Transaction> {}\n\nexport interface Transaction {\n\n  /**\n   * transaction reference ID\n   */\n  id: string;\n\n  /**\n   * transaction party info\n   */\n  accountParty?: AccountNumber;\n\n  /**\n   * Amount\n   */\n  amount?: Amount;\n\n  /**\n   * Sender amount\n   */\n  amountSender?: Amount;\n\n  /**\n   * date of booking\n   */\n  bookingDate?: Date;\n\n  /**\n   * number of card used in transaction\n   */\n  cardNumber?: number;\n\n  /**\n   * constant symbol\n   */\n  constantSymbol?: string;\n\n  /**\n   * conversion rates in EUR\n   */\n  currRateEURValue?: string;\n\n  /**\n   * date of conversion\n   */\n  currRateEURDate?: Date;\n\n  /**\n   * user description of the transaction\n   */\n  description?: string;\n\n  /**\n   * note for payee (\"zpráva pro příjemce\"). Up to 140 chars. For foreign transactions, additional info about currency rate etc.\n   */\n  payeeNote?: string;\n\n  /**\n   * note for payer (\"zpráva pro mě\"). Up to 140 chars.\n   */\n  payerNote?: string;\n\n  /**\n   * specific symbol\n   */\n  specificSymbol?: string;\n\n  /**\n   * type of transaction\n   */\n  transactionType: string;\n\n  /**\n   * localized type of transaction\n   */\n  transactionTypeI18N?: string;\n\n  /**\n   * date of valuation\n   */\n  valuationDate?: Date;\n\n  /**\n   * variable symbol\n   */\n  variableSymbol?: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/accounts/transactions.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { CampaignsResource } from './campaigns';\nimport { RelationshipManagersResource } from './relationship-managers';\n\nexport class CompaniesResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.HasInstanceResource<CompanyResource>, CSCoreSDK.ListEnabled<Company> {\n\n  /**\n   * List of companies associated with client including the type of relationship from the current client to the subject.\n   */\n  list = (): Promise<CompanyList> => {\n\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null).then(response => {\n\n      // Add convenience methods to listing items\n      response.items.forEach(item => {\n        resourcifyListing(<Company>item, this.withId((<Company>item).regNum), true);\n      });\n\n      return response;\n    });\n  }\n  \n  /**\n   * Get a Company resource for company with a given ico representing registration number\n   */\n  withId = (ico: string|number): CompanyResource => {\n    \n    return new CompanyResource(ico, this.getPath(), this.getClient());\n  }\n}\n\nexport class CompanyResource extends CSCoreSDK.InstanceResource\nimplements CSCoreSDK.GetEnabled<Company> {\n\n  /**\n   * Get company detail\n   */\n  get = (): Promise<Company> => {\n\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      // Add convenience methods to response\n      resourcifyListing(<Company>response, this, false);\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns CampaignsResource for listing company's campaigns\n   */\n  get campaigns(): CampaignsResource {\n\n    return new CampaignsResource(`${this.getPath()}/campaigns`, this.getClient());\n  }\n\n  /**\n   * Returns RelationshipManagersResource for listing company's relationship managers and info about them including photo\n   */\n  get relationshipManagers(): RelationshipManagersResource {\n\n    return new RelationshipManagersResource(`${this.getPath()}/relationshipmanagers`, this.getClient());\n  }\n}\n\nconst resourcifyListing = (company: Company, companyReference: CompanyResource, isListing) => {\n  if(isListing) {\n    company.get = companyReference.get;\n  }\n  company.campaigns = companyReference.campaigns;\n  company.relationshipManagers = companyReference.relationshipManagers;\n}\n\nexport interface CompanyList extends CSCoreSDK.ListResponse<Company> {}\n\nexport interface Company {\n\n  /**\n   * registration number (ICO)\n   */\n  regNum: number;\n\n  /**\n   * taxation number (DIC)\n   */\n  taxNum?: number;\n\n  /**\n   * Legal form of the company (codebook)\n   */\n  legalForm?: string;\n\n  /**\n   * Localized name of the legal form of the company\n   */\n  legalFormI18N?: string;\n\n  /**\n   * Name of the company\n   */\n  name: string;\n\n  /**\n   * Profile data (like industry sector)\n   */\n  companyProfile?: {\n\n    /**\n     * Company type according to CNB (codebook)\n     */\n    cnbType?: string;\n\n    /**\n     * Localized name of the company type according to CNB\n     */\n    cnbTypeI18N?: string;\n\n    /**\n     * NACE industry code (codebook)\n     */\n    industryCategory?: string;\n\n    /**\n     * Localized name of the NACE industry code\n     */\n    industryCategoryI18N?: string;\n\n    /**\n     * Sector according to CSU (codebook)\n     */\n    sector?: string;\n\n    /**\n     * Localized name of sector according to CSU\n     */\n    sectorI18N?: string;\n  }\n\n  /**\n   * Type of relationship\n   */\n  relationshipType?: {\n\n    /**\n     * \tCode of type of the relationship (codebook)\n     */\n    relationshipType?: string;\n\n    /**\n     * Name of the relationship type (like '100% Vlastník')\n     */\n    relationshipTypeI18N?: string;\n  }\n  \n /**\n  * Convenience getter for getting companies's campaigns resource\n  */\n  campaigns: CampaignsResource;\n\n /**\n  * Convenience getter for getting companies's relationship managers resource\n  */\n  relationshipManagers: RelationshipManagersResource;\n\n  /**\n   * Convenience method for getting detail of the company right from the list \n   */\n  get: () => Promise<Company>;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/companies.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\nexport class CampaignsResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.ListEnabled<Campaign> {\n\n  /**\n   * List marketing campaigns\n   */\n  list = (): Promise<CampaignList> => {\n\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null).then(response => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesToItems('endDate', response);\n\n      return response;\n    });\n  }\n}\n\nexport interface CampaignList extends CSCoreSDK.ListResponse<Campaign> {}\n\nexport interface Campaign {\n\n  /**\n   * Id of a campaign\n   */\n  id: string;\n\n  /**\n   * name of campaign\n   */\n  name?: string;\n\n  /**\n   * End date of a campaign\n   */\n  endDate?: Date;\n\n  /**\n   * Channel of a campaign\n   */\n  channel?: string;\n\n  /**\n   * Comment \n   */\n  comment?: string;\n\n  /**\n   * Target number group\n   */\n  targetListId?: number;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/campaigns.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { RelationshipManagerPhotoResource } from './photo/photo';\n\nexport class RelationshipManagersResource extends CSCoreSDK.Resource\n  implements CSCoreSDK.ListEnabled<RelationshipManager>, CSCoreSDK.HasInstanceResource<RelationshipManagerResource> {\n\n  /**\n   * List all relationship managers grouped by their positions. You will get an array of positions whilst each position may include one or more relationship managers. Typically there should be just one position flagged as primary as well as one contact in each position. \n   * You can filter for all positions (ALL) or for primary only (PRIMARY).\n   */\n  list = (params?: RelationshipManagerListParameters): Promise<RelationshipManagerList> => {\n\n    return CSCoreSDK.ResourceUtils.CallListWithSuffix(this, null, null, params).then(response => {\n\n      // Add convenience methods to listing items\n      response.items.forEach(item => {\n        if (Array.isArray((<RelationshipManager>item).employees)) {\n\n          (<RelationshipManager>item).employees.forEach(employee => {\n            resourcifyListing(<ListingEmployee>employee, this.withId((<ListingEmployee>employee).empId), true);\n          });\n        }\n      });\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns RelationshipManagerResource for a given employee id\n   */\n  withId = (emplId: string | number): RelationshipManagerResource => {\n\n    return new RelationshipManagerResource(emplId, this.getPath(), this.getClient());\n  }\n}\n\nexport class RelationshipManagerResource extends CSCoreSDK.InstanceResource\n  implements CSCoreSDK.GetEnabled<EmployeeDetail> {\n\n  /**\n   * Get a reletionshipt manager detail\n   */\n  get = (): Promise<EmployeeDetail> => {\n\n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      // Add convenience methods to response\n      resourcifyListing(<EmployeeDetail>response, this, false);\n\n      return response;\n    });\n  }\n\n  /**\n   * Returns RelationshipManagerPhotoResource for getting relationship managers photo\n   */\n  get photo(): RelationshipManagerPhotoResource {\n\n    return new RelationshipManagerPhotoResource(`${this.getPath()}/photo`, this.getClient());\n  }\n}\n\nconst resourcifyListing = (employee: ListingEmployee | EmployeeDetail, employeeReference: RelationshipManagerResource, isFromListing) => {\n  if (isFromListing) {\n    (<any>employee).get = employeeReference.get;\n  }\n  employee.photo = employeeReference.photo;\n}\n\nexport interface RelationshipManagerListParameters {\n\n  /**\n   * Filter for all positions (ALL) or for primary only (PRIMARY).\n   */\n  filter?: string;\n}\n\nexport interface RelationshipManagerList extends CSCoreSDK.ListResponse<RelationshipManager> { }\n\nexport interface RelationshipManager {\n\n  /**\n   * Position identifier.\n   */\n  id: string;\n\n  /**\n   * \tPosition name.\n   */\n  name: string;\n\n  /**\n   * Marks a positions as primary for a client.\n   */\n  primaryFlag?: boolean;\n\n  /**\n   * List of branch specialists in this position\n   */\n  employees: [ListingEmployee];\n}\n\nexport interface Employee {\n\n  /**\n   * Employee id, used in API-s like PhoneBook\n   */\n  empId?: number;\n\n  /**\n   * Specialist's first name.\n   */\n  firstName: string;\n\n  /**\n   * Specialist's last name.\n   */\n  lastName: string;\n\n  /**\n  * Convenience getter for getting relationship managers's photo resource\n  */\n  photo: RelationshipManagerPhotoResource;\n\n  /**\n   * Convenience method for getting detail of the relationship manager from the list \n   */\n  get: () => Promise<Employee | RelationshipManager>;\n}\n\nexport interface ListingEmployee extends Employee {\n\n  /**\n   * Marks a specialist as primary for a client.\n   */\n  primaryFlag?: boolean;\n}\n\nexport interface EmployeeDetail extends Employee {\n\n  /**\n   * Employee personal number\n   */\n  personalNumber?: number;\n\n  /**\n   * Title\n   */\n  titleA?: string;\n\n  /**\n   * Title\n   */\n  titleB?: string;\n\n  /**\n   * First name\n   */\n  name?: string;\n\n  /**\n   * Surname\n   */\n  surname?: string;\n\n  /**\n   * Full name composite\n   */\n  fullName?: string;\n\n  /**\n   * Enumeration: MALE/FEMALE\n   */\n  gender?: string;\n\n  /**\n   * Identifier of employee manager\n   */\n  employeeManagerId?: number;\n\n  /**\n   * Identifier of employee team\n   */\n  teamId?: string;\n\n  /**\n   * Contact details\n   */\n  contact?: {\n\n    /**\n     * Employee login name\n     */\n    loginName?: string;\n\n    /**\n     * Email of the employee\n     */\n    email?: string;\n\n    /**\n     * Phone 1 number\n     */\n    phone1?: string;\n\n    /**\n     * Phone 2 number\n     */\n    phone2?: string;\n\n    /**\n     * Fax number\n     */\n    fax?: string;\n\n    /**\n     * Mobile number\n     */\n    mobil?: string;\n\n    /**\n     * Office number\n     */\n    officeNumber?: string;\n\n    /**\n     * Contact cost unit\n     */\n    costUnit?: number;\n\n    /**\n     * Contact location unit\n     */\n    locationUnit?: string;\n\n    /**\n     * Building details\n     */\n    building?: {\n\n      /**\n       * Building identifier\n       */\n      id?: number;\n\n      /**\n       * Company code\n       */\n      companyCode?: string;\n\n      /**\n       * Street name of a building\n       */\n      street?: string;\n\n      /**\n       * City of a building\n       */\n      city?: string;\n\n      /**\n       * Postcode of a building\n       */\n      postCode?: string;\n\n      /**\n       * Country info\n       */\n      country?: {\n\n        /**\n         * Country code of a building\n         */\n        country?: string;\n\n        /**\n         * Localized country name\n         */\n        nameI18N?: string;\n      };\n    };\n  };\n\n  /**\n   * Department Info\n   */\n  department?: {\n\n    /**\n     * Country name of a building\n     */\n    id?: number;\n\n    /**\n     * Department code\n     */\n    departmentCode?: string;\n\n    /**\n     * Department name\n     */\n    nameI18N?: string;\n\n    /**\n     * Department head id\n     */\n    headId?: number;\n\n    /**\n     * Department parent id\n     */\n    parentId?: number;\n\n    /**\n     * Company info\n     */\n    company?: {\n\n      /**\n       * Company code\n       */\n      companyCode?: string;\n\n      /**\n       * Company name\n       */\n      nameI18N?: string;\n\n      /**\n       * Company name in English\n       */\n      nameI18N_EN?: string;\n\n      /**\n       * Department prefix\n       */\n      departmentPrefix?: number;\n\n      /**\n       * Company code\n       */\n      displayCode?: string;\n\n      /**\n       * Manually updated flag\n       */\n      manuallyUpdated?: boolean;\n\n      /**\n       * Department exists flag\n       */\n      departmentExists?: boolean;\n    };\n\n  };\n\n  /**\n   * Position info\n   */\n  position?: {\n\n    /**\n     * Position identifier\n     */\n    id?: number;\n\n    /**\n     * Position code\n     */\n    positionCode?: string;\n\n    /**\n     * Position description\n     */\n    descriptionI18N?: string;\n\n    /**\n     * Company code\n     */\n    companyCode?: string;\n  };\n\n  /**\n  * Convenience getter for getting relationship manager's photo resource\n  */\n  photo: RelationshipManagerPhotoResource;\n\n  /**\n   * Convenience method for getting detail of the relationship manager right from the list \n   */\n  get: () => Promise<RelationshipManager>;\n};\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/relationship-managers.ts","import * as CSCoreSDK from 'cs-core-sdk';\nimport { RelationshipManagerPhotoInfoResource } from './info';\n\nexport class RelationshipManagerPhotoResource extends CSCoreSDK.Resource {\n\n  /**\n   * Download relations managers photo. \n   */\n  download = (params: RelationshipManagerPhotoDownloadParameters): Promise<any> => {\n\n    return CSCoreSDK.ResourceUtils.CallDownload(this, null, 'GET', params);\n  }\n\n  /**\n   * Returns RelationshipManagerPhotoInfoResource for getting infomation about the photo\n   */\n  get info(): RelationshipManagerPhotoInfoResource {\n    \n    return new RelationshipManagerPhotoInfoResource(`${this.getPath()}/info`, this.getClient());\n  }\n}\n\nexport interface RelationshipManagerPhotoDownloadParameters {\n\n  /**\n   * type of photo (BW, THUMBNAIL, MINI, STANDARD, LARGE)\n   */\n  type: string;\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/photo/photo.ts","import * as CSCoreSDK from 'cs-core-sdk';\n\nexport class RelationshipManagerPhotoInfoResource extends CSCoreSDK.Resource\nimplements CSCoreSDK.GetEnabled<RelationshipManagerPhotoInfo> {\n\n  /**\n   * Get information about the relationship manager photo\n   */\n  get = (): Promise<RelationshipManagerPhotoInfo> => {\n    \n    return CSCoreSDK.ResourceUtils.CallGet(this, null).then(response => {\n\n      // transform ISO strings to date objects\n      CSCoreSDK.EntityUtils.addDatesFromISO('agreementDate', response);\n\n      return response;\n    });\n  }\n}\n\nexport interface RelationshipManagerPhotoInfo {\n\n  /**\n   * employee identifier\n   */\n  empId?: number;\n\n  /**\n   * agreement time\n   */\n  agreementDate?: Date;\n\n  /**\n   * mime type of photos\n   */\n  mimeType?: string;\n\n  /**\n   * Returns true if photo was approved\n   */\n  agreement?: boolean;\n\n  /**\n   * list of available photos\n   */\n  types?: [string];\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/companies/photo/info.ts"],"sourceRoot":""}